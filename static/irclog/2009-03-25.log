<li class="quit">[<a href="#T00:01:41" id="T00:01:41"><abbr title="2009-03-25T00:01:41+00:00">00:01:41</abbr></a>] <span>* geckosenator (n=sean@71.237.94.78) Quit (Read error: 110 (Connection timed out))</span></li>
<li class="message">[<a href="#T00:05:35" id="T00:05:35"><abbr title="2009-03-25T00:05:35+00:00">00:05:35</abbr></a>] &lt;<cite>ds</cite>&gt; <q>anyone happen to know methods of detecting CPU features on ARM other than /proc/cpuinfo?</q></li>
<li class="message">[<a href="#T00:08:49" id="T00:08:49"><abbr title="2009-03-25T00:08:49+00:00">00:08:49</abbr></a>] &lt;<cite>mru</cite>&gt; <q>there are none</q></li>
<li class="message">[<a href="#T00:08:53" id="T00:08:53"><abbr title="2009-03-25T00:08:53+00:00">00:08:53</abbr></a>] &lt;<cite>mru</cite>&gt; <q>unless you are the kernel</q></li>
<li class="message">[<a href="#T00:09:12" id="T00:09:12"><abbr title="2009-03-25T00:09:12+00:00">00:09:12</abbr></a>] &lt;<cite>mru</cite>&gt; <q>we've been discussing this actually</q></li>
<li class="message">[<a href="#T00:09:33" id="T00:09:33"><abbr title="2009-03-25T00:09:33+00:00">00:09:33</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I suggested kernel emulation of the ID register access instructions</q></li>
<li class="message">[<a href="#T00:09:50" id="T00:09:50"><abbr title="2009-03-25T00:09:50+00:00">00:09:50</abbr></a>] &lt;<cite>mru</cite>&gt; <q>how would that suit your needs?</q></li>
<li class="quit">[<a href="#T00:15:08" id="T00:15:08"><abbr title="2009-03-25T00:15:08+00:00">00:15:08</abbr></a>] <span>* florian (n=fuchs@f048109146.adsl.alicedsl.de) Quit ("Verlassend")</span></li>
<li class="nick-change">[<a href="#T00:18:00" id="T00:18:00"><abbr title="2009-03-25T00:18:00+00:00">00:18:00</abbr></a>] <span>* cbrake is now known as cbrake_away</span></li>
<li class="quit">[<a href="#T00:18:36" id="T00:18:36"><abbr title="2009-03-25T00:18:36+00:00">00:18:36</abbr></a>] <span>* spinl0ck (n=spinl0ck@vodsl-10890.vo.lu) Quit (Read error: 60 (Operation timed out))</span></li>
<li class="join">[<a href="#T00:21:44" id="T00:21:44"><abbr title="2009-03-25T00:21:44+00:00">00:21:44</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) has joined #beagle</span></li>
<li class="join">[<a href="#T00:24:05" id="T00:24:05"><abbr title="2009-03-25T00:24:05+00:00">00:24:05</abbr></a>] <span>* bmxr (n=bmxr@S01060018f3b11a22.vf.shawcable.net) has joined #beagle</span></li>
<li class="message">[<a href="#T00:25:20" id="T00:25:20"><abbr title="2009-03-25T00:25:20+00:00">00:25:20</abbr></a>] &lt;<cite>ds</cite>&gt; <q>mru: the closest to best method I've seen is a documented bitfield in auxv on PowerPC</q></li>
<li class="message">[<a href="#T00:25:38" id="T00:25:38"><abbr title="2009-03-25T00:25:38+00:00">00:25:38</abbr></a>] &lt;<cite>ds</cite>&gt; <q>mru: unfortunately, this requires hooking into main(), which is generally not possible for a library</q></li>
<li class="message">[<a href="#T00:25:59" id="T00:25:59"><abbr title="2009-03-25T00:25:59+00:00">00:25:59</abbr></a>] &lt;<cite>ds</cite>&gt; <q>mru: so even though it's "close to best", it's still not adequate</q></li>
<li class="message">[<a href="#T00:26:50" id="T00:26:50"><abbr title="2009-03-25T00:26:50+00:00">00:26:50</abbr></a>] &lt;<cite>ds</cite>&gt; <q>emulating what the CPU would do if in supervisor mode is good, but requires writing and testing a bunch of code that didn't need to be written</q></li>
<li class="message">[<a href="#T00:26:54" id="T00:26:54"><abbr title="2009-03-25T00:26:54+00:00">00:26:54</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ds: __init()</q></li>
<li class="message">[<a href="#T00:26:58" id="T00:26:58"><abbr title="2009-03-25T00:26:58+00:00">00:26:58</abbr></a>] &lt;<cite>mru</cite>&gt; <q>recent linux kernels emulate the id reading instructions on ppc</q></li>
<li class="message">[<a href="#T00:27:40" id="T00:27:40"><abbr title="2009-03-25T00:27:40+00:00">00:27:40</abbr></a>] &lt;<cite>mru</cite>&gt; <q>auxv was also suggested as a possibility on arm</q></li>
<li class="message">[<a href="#T00:27:52" id="T00:27:52"><abbr title="2009-03-25T00:27:52+00:00">00:27:52</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I prefer the id register method</q></li>
<li class="message">[<a href="#T00:28:10" id="T00:28:10"><abbr title="2009-03-25T00:28:10+00:00">00:28:10</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it stands a much better chance of being picked up on other OSes</q></li>
<li class="message">[<a href="#T00:28:20" id="T00:28:20"><abbr title="2009-03-25T00:28:20+00:00">00:28:20</abbr></a>] &lt;<cite>mru</cite>&gt; <q>and it needs changes only to the kernel</q></li>
<li class="message">[<a href="#T00:28:28" id="T00:28:28"><abbr title="2009-03-25T00:28:28+00:00">00:28:28</abbr></a>] &lt;<cite>ds</cite>&gt; <q>also, sysctl() is nice</q></li>
<li class="message">[<a href="#T00:28:44" id="T00:28:44"><abbr title="2009-03-25T00:28:44+00:00">00:28:44</abbr></a>] &lt;<cite>mru</cite>&gt; <q>again, less portable</q></li>
<li class="message">[<a href="#T00:29:05" id="T00:29:05"><abbr title="2009-03-25T00:29:05+00:00">00:29:05</abbr></a>] &lt;<cite>ds</cite>&gt; <q>actually, let me take back what I said.  sysctl() is the best method I've seen</q></li>
<li class="message">[<a href="#T00:29:12" id="T00:29:12"><abbr title="2009-03-25T00:29:12+00:00">00:29:12</abbr></a>] &lt;<cite>raster</cite>&gt; <q>btw</q></li>
<li class="message">[<a href="#T00:29:14" id="T00:29:14"><abbr title="2009-03-25T00:29:14+00:00">00:29:14</abbr></a>] &lt;<cite>mru</cite>&gt; <q>sysctl how?</q></li>
<li class="message">[<a href="#T00:29:17" id="T00:29:17"><abbr title="2009-03-25T00:29:17+00:00">00:29:17</abbr></a>] &lt;<cite>raster</cite>&gt; <q>i find it s3easy to detect</q></li>
<li class="message">[<a href="#T00:29:26" id="T00:29:26"><abbr title="2009-03-25T00:29:26+00:00">00:29:26</abbr></a>] &lt;<cite>raster</cite>&gt; <q>i use that wonderful thing calls SIGILL</q></li>
<li class="message">[<a href="#T00:29:27" id="T00:29:27"><abbr title="2009-03-25T00:29:27+00:00">00:29:27</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T00:29:29" id="T00:29:29"><abbr title="2009-03-25T00:29:29+00:00">00:29:29</abbr></a>] &lt;<cite>raster</cite>&gt; <q>called</q></li>
<li class="message">[<a href="#T00:29:32" id="T00:29:32"><abbr title="2009-03-25T00:29:32+00:00">00:29:32</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ie</q></li>
<li class="message">[<a href="#T00:29:35" id="T00:29:35"><abbr title="2009-03-25T00:29:35+00:00">00:29:35</abbr></a>] &lt;<cite>ds</cite>&gt; <q>just that Linux people don't seem to like sysctl() :)</q></li>
<li class="message">[<abbr title="2009-03-25T00:29:35+00:00">00:29:35</abbr>] &lt;<cite>raster</cite>&gt; <q>have a test routine</q></li>
<li class="message">[<a href="#T00:29:39" id="T00:29:39"><abbr title="2009-03-25T00:29:39+00:00">00:29:39</abbr></a>] &lt;<cite>raster</cite>&gt; <q>try an opcode</q></li>
<li class="message">[<a href="#T00:29:45" id="T00:29:45"><abbr title="2009-03-25T00:29:45+00:00">00:29:45</abbr></a>] &lt;<cite>raster</cite>&gt; <q>see if u get a SIGILL</q></li>
<li class="message">[<a href="#T00:29:58" id="T00:29:58"><abbr title="2009-03-25T00:29:58+00:00">00:29:58</abbr></a>] &lt;<cite>mru</cite>&gt; <q>nooooo</q></li>
<li class="message">[<a href="#T00:30:00" id="T00:30:00"><abbr title="2009-03-25T00:30:00+00:00">00:30:00</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ikf so - that opecode (and any other features that ity is part of) are not there</q></li>
<li class="message">[<a href="#T00:30:39" id="T00:30:39"><abbr title="2009-03-25T00:30:39+00:00">00:30:39</abbr></a>] &lt;<cite>raster</cite>&gt; <q>has worked for me for many years for ppc, x86 and i'm using it for n eon</q></li>
<li class="message">[<a href="#T00:30:40" id="T00:30:40"><abbr title="2009-03-25T00:30:40+00:00">00:30:40</abbr></a>] &lt;<cite>raster</cite>&gt; <q>err</q></li>
<li class="message">[<a href="#T00:30:42" id="T00:30:42"><abbr title="2009-03-25T00:30:42+00:00">00:30:42</abbr></a>] &lt;<cite>raster</cite>&gt; <q>neon</q></li>
<li class="message">[<a href="#T00:31:10" id="T00:31:10"><abbr title="2009-03-25T00:31:10+00:00">00:31:10</abbr></a>] &lt;<cite>mru</cite>&gt; <q>sigill is evil</q></li>
<li class="message">[<a href="#T00:31:17" id="T00:31:17"><abbr title="2009-03-25T00:31:17+00:00">00:31:17</abbr></a>] &lt;<cite>raster</cite>&gt; <q>but ... it works</q></li>
<li class="message">[<a href="#T00:31:18" id="T00:31:18"><abbr title="2009-03-25T00:31:18+00:00">00:31:18</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T00:31:25" id="T00:31:25"><abbr title="2009-03-25T00:31:25+00:00">00:31:25</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's fragile</q></li>
<li class="message">[<a href="#T00:31:34" id="T00:31:34"><abbr title="2009-03-25T00:31:34+00:00">00:31:34</abbr></a>] &lt;<cite>raster</cite>&gt; <q>to be honest - i havent found so</q></li>
<li class="message">[<a href="#T00:31:40" id="T00:31:40"><abbr title="2009-03-25T00:31:40+00:00">00:31:40</abbr></a>] &lt;<cite>mru</cite>&gt; <q>messing with signal handlers is a very bad idea in a library</q></li>
<li class="message">[<a href="#T00:31:42" id="T00:31:42"><abbr title="2009-03-25T00:31:42+00:00">00:31:42</abbr></a>] &lt;<cite>raster</cite>&gt; <q>what have u found it to be fragile at?</q></li>
<li class="message">[<a href="#T00:31:46" id="T00:31:46"><abbr title="2009-03-25T00:31:46+00:00">00:31:46</abbr></a>] &lt;<cite>raster</cite>&gt; <q>oh</q></li>
<li class="message">[<a href="#T00:31:50" id="T00:31:50"><abbr title="2009-03-25T00:31:50+00:00">00:31:50</abbr></a>] &lt;<cite>mru</cite>&gt; <q>especially if there are pthreads involved</q></li>
<li class="message">[<a href="#T00:31:51" id="T00:31:51"><abbr title="2009-03-25T00:31:51+00:00">00:31:51</abbr></a>] &lt;<cite>raster</cite>&gt; <q>it just sets and restores the handler</q></li>
<li class="message">[<a href="#T00:31:58" id="T00:31:58"><abbr title="2009-03-25T00:31:58+00:00">00:31:58</abbr></a>] &lt;<cite>raster</cite>&gt; <q>and its done once only on init</q></li>
<li class="message">[<a href="#T00:32:01" id="T00:32:01"><abbr title="2009-03-25T00:32:01+00:00">00:32:01</abbr></a>] &lt;<cite>raster</cite>&gt; <q>true</q></li>
<li class="message">[<a href="#T00:32:04" id="T00:32:04"><abbr title="2009-03-25T00:32:04+00:00">00:32:04</abbr></a>] &lt;<cite>ds</cite>&gt; <q>I'd rather not write code that "discovers" features.  I'd rather have a simple obvious function that return a bit pattern</q></li>
<li class="message">[<a href="#T00:32:15" id="T00:32:15"><abbr title="2009-03-25T00:32:15+00:00">00:32:15</abbr></a>] &lt;<cite>raster</cite>&gt; <q>as i expectr the lib to be oinitted before you launch off into any thread land</q></li>
<li class="message">[<a href="#T00:32:19" id="T00:32:19"><abbr title="2009-03-25T00:32:19+00:00">00:32:19</abbr></a>] &lt;<cite>raster</cite>&gt; <q>its not a problem</q></li>
<li class="message">[<a href="#T00:32:21" id="T00:32:21"><abbr title="2009-03-25T00:32:21+00:00">00:32:21</abbr></a>] &lt;<cite>mru</cite>&gt; <q>yes, it's called MRC</q></li>
<li class="message">[<a href="#T00:32:37" id="T00:32:37"><abbr title="2009-03-25T00:32:37+00:00">00:32:37</abbr></a>] &lt;<cite>mru</cite>&gt; <q>raster: that's not a valid assumption</q></li>
<li class="message">[<a href="#T00:33:01" id="T00:33:01"><abbr title="2009-03-25T00:33:01+00:00">00:33:01</abbr></a>] &lt;<cite>raster</cite>&gt; <q>in my case it is</q></li>
<li class="message">[<a href="#T00:33:03" id="T00:33:03"><abbr title="2009-03-25T00:33:03+00:00">00:33:03</abbr></a>] &lt;<cite>raster</cite>&gt; <q>as its a requirement</q></li>
<li class="message">[<a href="#T00:33:08" id="T00:33:08"><abbr title="2009-03-25T00:33:08+00:00">00:33:08</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I've written code that fires up gtk in semi-isolation if needed</q></li>
<li class="message">[<a href="#T00:33:10" id="T00:33:10"><abbr title="2009-03-25T00:33:10+00:00">00:33:10</abbr></a>] &lt;<cite>raster</cite>&gt; <q>as the lib isnt threadsafe</q></li>
<li class="message">[<a href="#T00:33:37" id="T00:33:37"><abbr title="2009-03-25T00:33:37+00:00">00:33:37</abbr></a>] &lt;<cite>mru</cite>&gt; <q>your case isn't everyone's</q></li>
<li class="message">[<a href="#T00:33:42" id="T00:33:42"><abbr title="2009-03-25T00:33:42+00:00">00:33:42</abbr></a>] &lt;<cite>raster</cite>&gt; <q>i know</q></li>
<li class="message">[<a href="#T00:33:43" id="T00:33:43"><abbr title="2009-03-25T00:33:43+00:00">00:33:43</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T00:33:50" id="T00:33:50"><abbr title="2009-03-25T00:33:50+00:00">00:33:50</abbr></a>] &lt;<cite>russ</cite>&gt; <q>maybe a sacrificial process?</q></li>
<li class="message">[<a href="#T00:33:51" id="T00:33:51"><abbr title="2009-03-25T00:33:51+00:00">00:33:51</abbr></a>] &lt;<cite>raster</cite>&gt; <q>but u can use __init()</q></li>
<li class="message">[<a href="#T00:33:58" id="T00:33:58"><abbr title="2009-03-25T00:33:58+00:00">00:33:58</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ld.so will call it prior to main()</q></li>
<li class="message">[<a href="#T00:34:03" id="T00:34:03"><abbr title="2009-03-25T00:34:03+00:00">00:34:03</abbr></a>] &lt;<cite>mru</cite>&gt; <q>not on random-obscure-os</q></li>
<li class="message">[<a href="#T00:34:12" id="T00:34:12"><abbr title="2009-03-25T00:34:12+00:00">00:34:12</abbr></a>] &lt;<cite>raster</cite>&gt; <q>if u link</q></li>
<li class="message">[<a href="#T00:34:21" id="T00:34:21"><abbr title="2009-03-25T00:34:21+00:00">00:34:21</abbr></a>] &lt;<cite>raster</cite>&gt; <q>if its an indirect dep from a dlopen()Ed module</q></li>
<li class="message">[<a href="#T00:34:26" id="T00:34:26"><abbr title="2009-03-25T00:34:26+00:00">00:34:26</abbr></a>] &lt;<cite>raster</cite>&gt; <q>it will happen ad lopen() time</q></li>
<li class="message">[<a href="#T00:34:29" id="T00:34:29"><abbr title="2009-03-25T00:34:29+00:00">00:34:29</abbr></a>] &lt;<cite>mru</cite>&gt; <q>hacking random-obscure-kernel to emulate a few mrc opcodes is much easier</q></li>
<li class="message">[<a href="#T00:34:31" id="T00:34:31"><abbr title="2009-03-25T00:34:31+00:00">00:34:31</abbr></a>] &lt;<cite>raster</cite>&gt; <q>at dlopen time</q></li>
<li class="message">[<a href="#T00:34:45" id="T00:34:45"><abbr title="2009-03-25T00:34:45+00:00">00:34:45</abbr></a>] &lt;<cite>mru</cite>&gt; <q>who says you have dlopen at all</q></li>
<li class="message">[<a href="#T00:34:49" id="T00:34:49"><abbr title="2009-03-25T00:34:49+00:00">00:34:49</abbr></a>] &lt;<cite>raster</cite>&gt; <q>the problem is universality</q></li>
<li class="message">[<a href="#T00:34:50" id="T00:34:50"><abbr title="2009-03-25T00:34:50+00:00">00:34:50</abbr></a>] &lt;<cite>mru</cite>&gt; <q>who says you're using elf?</q></li>
<li class="message">[<a href="#T00:34:56" id="T00:34:56"><abbr title="2009-03-25T00:34:56+00:00">00:34:56</abbr></a>] &lt;<cite>mru</cite>&gt; <q>mrc is universal</q></li>
<li class="message">[<abbr title="2009-03-25T00:34:56+00:00">00:34:56</abbr>] &lt;<cite>raster</cite>&gt; <q>hehehehe</q></li>
<li class="message">[<a href="#T00:34:59" id="T00:34:59"><abbr title="2009-03-25T00:34:59+00:00">00:34:59</abbr></a>] &lt;<cite>raster</cite>&gt; <q>in my case</q></li>
<li class="message">[<a href="#T00:35:00" id="T00:35:00"><abbr title="2009-03-25T00:35:00+00:00">00:35:00</abbr></a>] &lt;<cite>raster</cite>&gt; <q>no dlopen</q></li>
<li class="message">[<a href="#T00:35:01" id="T00:35:01"><abbr title="2009-03-25T00:35:01+00:00">00:35:01</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's architectural</q></li>
<li class="message">[<a href="#T00:35:04" id="T00:35:04"><abbr title="2009-03-25T00:35:04+00:00">00:35:04</abbr></a>] &lt;<cite>raster</cite>&gt; <q>no go</q></li>
<li class="message">[<abbr title="2009-03-25T00:35:04+00:00">00:35:04</abbr>] &lt;<cite>raster</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T00:35:19" id="T00:35:19"><abbr title="2009-03-25T00:35:19+00:00">00:35:19</abbr></a>] &lt;<cite>raster</cite>&gt; <q>umm</q></li>
<li class="message">[<a href="#T00:35:27" id="T00:35:27"><abbr title="2009-03-25T00:35:27+00:00">00:35:27</abbr></a>] &lt;<cite>raster</cite>&gt; <q>universal as the same across multiple unix os's</q></li>
<li class="message">[<a href="#T00:35:30" id="T00:35:30"><abbr title="2009-03-25T00:35:30+00:00">00:35:30</abbr></a>] &lt;<cite>raster</cite>&gt; <q>multiple architectures</q></li>
<li class="message">[<a href="#T00:35:37" id="T00:35:37"><abbr title="2009-03-25T00:35:37+00:00">00:35:37</abbr></a>] &lt;<cite>raster</cite>&gt; <q>the problem is no such thnig exists</q></li>
<li class="message">[<a href="#T00:35:38" id="T00:35:38"><abbr title="2009-03-25T00:35:38+00:00">00:35:38</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:(</q></li>
<li class="message">[<a href="#T00:35:46" id="T00:35:46"><abbr title="2009-03-25T00:35:46+00:00">00:35:46</abbr></a>] &lt;<cite>raster</cite>&gt; <q>(for discovering xpu features)</q></li>
<li class="message">[<a href="#T00:35:50" id="T00:35:50"><abbr title="2009-03-25T00:35:50+00:00">00:35:50</abbr></a>] &lt;<cite>raster</cite>&gt; <q>beyond /proc/cpuinfo</q></li>
<li class="message">[<a href="#T00:35:53" id="T00:35:53"><abbr title="2009-03-25T00:35:53+00:00">00:35:53</abbr></a>] &lt;<cite>raster</cite>&gt; <q>and thats linux only</q></li>
<li class="quit">[<a href="#T00:38:13" id="T00:38:13"><abbr title="2009-03-25T00:38:13+00:00">00:38:13</abbr></a>] <span>* turran (n=jl@unaffiliated/turran) Quit ("Leaving")</span></li>
<li class="message">[<a href="#T00:39:16" id="T00:39:16"><abbr title="2009-03-25T00:39:16+00:00">00:39:16</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I believe staying closer to the hardware will give better chances of others following</q></li>
<li class="message">[<a href="#T00:39:35" id="T00:39:35"><abbr title="2009-03-25T00:39:35+00:00">00:39:35</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I mean, try to implement /proc/cpuinfo on an os without a filesystem</q></li>
<li class="message">[<a href="#T00:40:02" id="T00:40:02"><abbr title="2009-03-25T00:40:02+00:00">00:40:02</abbr></a>] &lt;<cite>mru</cite>&gt; <q>we're talking arm here, so it's not that far-fetched</q></li>
<li class="message">[<a href="#T00:41:25" id="T00:41:25"><abbr title="2009-03-25T00:41:25+00:00">00:41:25</abbr></a>] &lt;<cite>russ</cite>&gt; <q>mru: make tight loops that check relative instruction execution time in order to generate a fingerprint for each processor</q></li>
<li class="message">[<a href="#T00:42:14" id="T00:42:14"><abbr title="2009-03-25T00:42:14+00:00">00:42:14</abbr></a>] &lt;<cite>mru</cite>&gt; <q>haha</q></li>
<li class="quit">[<a href="#T00:47:30" id="T00:47:30"><abbr title="2009-03-25T00:47:30+00:00">00:47:30</abbr></a>] <span>* guillaum1 (n=Guillaum@AMontsouris-153-1-55-75.w86-212.abo.wanadoo.fr) Quit ("Leaving.")</span></li>
<li class="join">[<a href="#T00:47:52" id="T00:47:52"><abbr title="2009-03-25T00:47:52+00:00">00:47:52</abbr></a>] <span>* guillaum1 (n=gl@AMontsouris-153-1-55-75.w86-212.abo.wanadoo.fr) has joined #beagle</span></li>
<li class="quit">[<a href="#T00:54:57" id="T00:54:57"><abbr title="2009-03-25T00:54:57+00:00">00:54:57</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) Quit ()</span></li>
<li class="message">[<a href="#T00:55:53" id="T00:55:53"><abbr title="2009-03-25T00:55:53+00:00">00:55:53</abbr></a>] &lt;<cite>ds</cite>&gt; <q>One can access the AUXV on powerpc using /proc/self/auxv, although that's still needlessly Linux-specific</q></li>
<li class="message">[<a href="#T00:56:39" id="T00:56:39"><abbr title="2009-03-25T00:56:39+00:00">00:56:39</abbr></a>] &lt;<cite>mru</cite>&gt; <q>as I said, linux on powerpc emulates the cpu identification instructions</q></li>
<li class="message">[<a href="#T00:56:57" id="T00:56:57"><abbr title="2009-03-25T00:56:57+00:00">00:56:57</abbr></a>] &lt;<cite>mru</cite>&gt; <q>no need to mess around with auxv</q></li>
<li class="message">[<a href="#T00:58:10" id="T00:58:10"><abbr title="2009-03-25T00:58:10+00:00">00:58:10</abbr></a>] &lt;<cite>ds</cite>&gt; <q>it changes what I said earlier, is all</q></li>
<li class="message">[<a href="#T01:00:01" id="T01:00:01"><abbr title="2009-03-25T01:00:01+00:00">01:00:01</abbr></a>] &lt;<cite>ds</cite>&gt; <q>one problem with relying on CPU identification instructions is that you risk a SIGILL on older kernels</q></li>
