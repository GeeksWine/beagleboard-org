<li class="quit">[<a href="#T00:01:41" id="T00:01:41"><abbr title="2009-03-25T00:01:41+00:00">00:01:41</abbr></a>] <span>* geckosenator (n=sean@71.237.94.78) Quit (Read error: 110 (Connection timed out))</span></li>
<li class="message">[<a href="#T00:05:35" id="T00:05:35"><abbr title="2009-03-25T00:05:35+00:00">00:05:35</abbr></a>] &lt;<cite>ds</cite>&gt; <q>anyone happen to know methods of detecting CPU features on ARM other than /proc/cpuinfo?</q></li>
<li class="message">[<a href="#T00:08:49" id="T00:08:49"><abbr title="2009-03-25T00:08:49+00:00">00:08:49</abbr></a>] &lt;<cite>mru</cite>&gt; <q>there are none</q></li>
<li class="message">[<a href="#T00:08:53" id="T00:08:53"><abbr title="2009-03-25T00:08:53+00:00">00:08:53</abbr></a>] &lt;<cite>mru</cite>&gt; <q>unless you are the kernel</q></li>
<li class="message">[<a href="#T00:09:12" id="T00:09:12"><abbr title="2009-03-25T00:09:12+00:00">00:09:12</abbr></a>] &lt;<cite>mru</cite>&gt; <q>we've been discussing this actually</q></li>
<li class="message">[<a href="#T00:09:33" id="T00:09:33"><abbr title="2009-03-25T00:09:33+00:00">00:09:33</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I suggested kernel emulation of the ID register access instructions</q></li>
<li class="message">[<a href="#T00:09:50" id="T00:09:50"><abbr title="2009-03-25T00:09:50+00:00">00:09:50</abbr></a>] &lt;<cite>mru</cite>&gt; <q>how would that suit your needs?</q></li>
<li class="quit">[<a href="#T00:15:08" id="T00:15:08"><abbr title="2009-03-25T00:15:08+00:00">00:15:08</abbr></a>] <span>* florian (n=fuchs@f048109146.adsl.alicedsl.de) Quit ("Verlassend")</span></li>
<li class="nick-change">[<a href="#T00:18:00" id="T00:18:00"><abbr title="2009-03-25T00:18:00+00:00">00:18:00</abbr></a>] <span>* cbrake is now known as cbrake_away</span></li>
<li class="quit">[<a href="#T00:18:36" id="T00:18:36"><abbr title="2009-03-25T00:18:36+00:00">00:18:36</abbr></a>] <span>* spinl0ck (n=spinl0ck@vodsl-10890.vo.lu) Quit (Read error: 60 (Operation timed out))</span></li>
<li class="join">[<a href="#T00:21:44" id="T00:21:44"><abbr title="2009-03-25T00:21:44+00:00">00:21:44</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) has joined #beagle</span></li>
<li class="join">[<a href="#T00:24:05" id="T00:24:05"><abbr title="2009-03-25T00:24:05+00:00">00:24:05</abbr></a>] <span>* bmxr (n=bmxr@S01060018f3b11a22.vf.shawcable.net) has joined #beagle</span></li>
<li class="message">[<a href="#T00:25:20" id="T00:25:20"><abbr title="2009-03-25T00:25:20+00:00">00:25:20</abbr></a>] &lt;<cite>ds</cite>&gt; <q>mru: the closest to best method I've seen is a documented bitfield in auxv on PowerPC</q></li>
<li class="message">[<a href="#T00:25:38" id="T00:25:38"><abbr title="2009-03-25T00:25:38+00:00">00:25:38</abbr></a>] &lt;<cite>ds</cite>&gt; <q>mru: unfortunately, this requires hooking into main(), which is generally not possible for a library</q></li>
<li class="message">[<a href="#T00:25:59" id="T00:25:59"><abbr title="2009-03-25T00:25:59+00:00">00:25:59</abbr></a>] &lt;<cite>ds</cite>&gt; <q>mru: so even though it's "close to best", it's still not adequate</q></li>
<li class="message">[<a href="#T00:26:50" id="T00:26:50"><abbr title="2009-03-25T00:26:50+00:00">00:26:50</abbr></a>] &lt;<cite>ds</cite>&gt; <q>emulating what the CPU would do if in supervisor mode is good, but requires writing and testing a bunch of code that didn't need to be written</q></li>
<li class="message">[<a href="#T00:26:54" id="T00:26:54"><abbr title="2009-03-25T00:26:54+00:00">00:26:54</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ds: __init()</q></li>
<li class="message">[<a href="#T00:26:58" id="T00:26:58"><abbr title="2009-03-25T00:26:58+00:00">00:26:58</abbr></a>] &lt;<cite>mru</cite>&gt; <q>recent linux kernels emulate the id reading instructions on ppc</q></li>
<li class="message">[<a href="#T00:27:40" id="T00:27:40"><abbr title="2009-03-25T00:27:40+00:00">00:27:40</abbr></a>] &lt;<cite>mru</cite>&gt; <q>auxv was also suggested as a possibility on arm</q></li>
<li class="message">[<a href="#T00:27:52" id="T00:27:52"><abbr title="2009-03-25T00:27:52+00:00">00:27:52</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I prefer the id register method</q></li>
<li class="message">[<a href="#T00:28:10" id="T00:28:10"><abbr title="2009-03-25T00:28:10+00:00">00:28:10</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it stands a much better chance of being picked up on other OSes</q></li>
<li class="message">[<a href="#T00:28:20" id="T00:28:20"><abbr title="2009-03-25T00:28:20+00:00">00:28:20</abbr></a>] &lt;<cite>mru</cite>&gt; <q>and it needs changes only to the kernel</q></li>
<li class="message">[<a href="#T00:28:28" id="T00:28:28"><abbr title="2009-03-25T00:28:28+00:00">00:28:28</abbr></a>] &lt;<cite>ds</cite>&gt; <q>also, sysctl() is nice</q></li>
<li class="message">[<a href="#T00:28:44" id="T00:28:44"><abbr title="2009-03-25T00:28:44+00:00">00:28:44</abbr></a>] &lt;<cite>mru</cite>&gt; <q>again, less portable</q></li>
<li class="message">[<a href="#T00:29:05" id="T00:29:05"><abbr title="2009-03-25T00:29:05+00:00">00:29:05</abbr></a>] &lt;<cite>ds</cite>&gt; <q>actually, let me take back what I said.  sysctl() is the best method I've seen</q></li>
<li class="message">[<a href="#T00:29:12" id="T00:29:12"><abbr title="2009-03-25T00:29:12+00:00">00:29:12</abbr></a>] &lt;<cite>raster</cite>&gt; <q>btw</q></li>
<li class="message">[<a href="#T00:29:14" id="T00:29:14"><abbr title="2009-03-25T00:29:14+00:00">00:29:14</abbr></a>] &lt;<cite>mru</cite>&gt; <q>sysctl how?</q></li>
<li class="message">[<a href="#T00:29:17" id="T00:29:17"><abbr title="2009-03-25T00:29:17+00:00">00:29:17</abbr></a>] &lt;<cite>raster</cite>&gt; <q>i find it s3easy to detect</q></li>
<li class="message">[<a href="#T00:29:26" id="T00:29:26"><abbr title="2009-03-25T00:29:26+00:00">00:29:26</abbr></a>] &lt;<cite>raster</cite>&gt; <q>i use that wonderful thing calls SIGILL</q></li>
<li class="message">[<a href="#T00:29:27" id="T00:29:27"><abbr title="2009-03-25T00:29:27+00:00">00:29:27</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T00:29:29" id="T00:29:29"><abbr title="2009-03-25T00:29:29+00:00">00:29:29</abbr></a>] &lt;<cite>raster</cite>&gt; <q>called</q></li>
<li class="message">[<a href="#T00:29:32" id="T00:29:32"><abbr title="2009-03-25T00:29:32+00:00">00:29:32</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ie</q></li>
<li class="message">[<a href="#T00:29:35" id="T00:29:35"><abbr title="2009-03-25T00:29:35+00:00">00:29:35</abbr></a>] &lt;<cite>ds</cite>&gt; <q>just that Linux people don't seem to like sysctl() :)</q></li>
<li class="message">[<abbr title="2009-03-25T00:29:35+00:00">00:29:35</abbr>] &lt;<cite>raster</cite>&gt; <q>have a test routine</q></li>
<li class="message">[<a href="#T00:29:39" id="T00:29:39"><abbr title="2009-03-25T00:29:39+00:00">00:29:39</abbr></a>] &lt;<cite>raster</cite>&gt; <q>try an opcode</q></li>
<li class="message">[<a href="#T00:29:45" id="T00:29:45"><abbr title="2009-03-25T00:29:45+00:00">00:29:45</abbr></a>] &lt;<cite>raster</cite>&gt; <q>see if u get a SIGILL</q></li>
<li class="message">[<a href="#T00:29:58" id="T00:29:58"><abbr title="2009-03-25T00:29:58+00:00">00:29:58</abbr></a>] &lt;<cite>mru</cite>&gt; <q>nooooo</q></li>
<li class="message">[<a href="#T00:30:00" id="T00:30:00"><abbr title="2009-03-25T00:30:00+00:00">00:30:00</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ikf so - that opecode (and any other features that ity is part of) are not there</q></li>
<li class="message">[<a href="#T00:30:39" id="T00:30:39"><abbr title="2009-03-25T00:30:39+00:00">00:30:39</abbr></a>] &lt;<cite>raster</cite>&gt; <q>has worked for me for many years for ppc, x86 and i'm using it for n eon</q></li>
<li class="message">[<a href="#T00:30:40" id="T00:30:40"><abbr title="2009-03-25T00:30:40+00:00">00:30:40</abbr></a>] &lt;<cite>raster</cite>&gt; <q>err</q></li>
<li class="message">[<a href="#T00:30:42" id="T00:30:42"><abbr title="2009-03-25T00:30:42+00:00">00:30:42</abbr></a>] &lt;<cite>raster</cite>&gt; <q>neon</q></li>
<li class="message">[<a href="#T00:31:10" id="T00:31:10"><abbr title="2009-03-25T00:31:10+00:00">00:31:10</abbr></a>] &lt;<cite>mru</cite>&gt; <q>sigill is evil</q></li>
<li class="message">[<a href="#T00:31:17" id="T00:31:17"><abbr title="2009-03-25T00:31:17+00:00">00:31:17</abbr></a>] &lt;<cite>raster</cite>&gt; <q>but ... it works</q></li>
<li class="message">[<a href="#T00:31:18" id="T00:31:18"><abbr title="2009-03-25T00:31:18+00:00">00:31:18</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T00:31:25" id="T00:31:25"><abbr title="2009-03-25T00:31:25+00:00">00:31:25</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's fragile</q></li>
<li class="message">[<a href="#T00:31:34" id="T00:31:34"><abbr title="2009-03-25T00:31:34+00:00">00:31:34</abbr></a>] &lt;<cite>raster</cite>&gt; <q>to be honest - i havent found so</q></li>
<li class="message">[<a href="#T00:31:40" id="T00:31:40"><abbr title="2009-03-25T00:31:40+00:00">00:31:40</abbr></a>] &lt;<cite>mru</cite>&gt; <q>messing with signal handlers is a very bad idea in a library</q></li>
<li class="message">[<a href="#T00:31:42" id="T00:31:42"><abbr title="2009-03-25T00:31:42+00:00">00:31:42</abbr></a>] &lt;<cite>raster</cite>&gt; <q>what have u found it to be fragile at?</q></li>
<li class="message">[<a href="#T00:31:46" id="T00:31:46"><abbr title="2009-03-25T00:31:46+00:00">00:31:46</abbr></a>] &lt;<cite>raster</cite>&gt; <q>oh</q></li>
<li class="message">[<a href="#T00:31:50" id="T00:31:50"><abbr title="2009-03-25T00:31:50+00:00">00:31:50</abbr></a>] &lt;<cite>mru</cite>&gt; <q>especially if there are pthreads involved</q></li>
<li class="message">[<a href="#T00:31:51" id="T00:31:51"><abbr title="2009-03-25T00:31:51+00:00">00:31:51</abbr></a>] &lt;<cite>raster</cite>&gt; <q>it just sets and restores the handler</q></li>
<li class="message">[<a href="#T00:31:58" id="T00:31:58"><abbr title="2009-03-25T00:31:58+00:00">00:31:58</abbr></a>] &lt;<cite>raster</cite>&gt; <q>and its done once only on init</q></li>
<li class="message">[<a href="#T00:32:01" id="T00:32:01"><abbr title="2009-03-25T00:32:01+00:00">00:32:01</abbr></a>] &lt;<cite>raster</cite>&gt; <q>true</q></li>
<li class="message">[<a href="#T00:32:04" id="T00:32:04"><abbr title="2009-03-25T00:32:04+00:00">00:32:04</abbr></a>] &lt;<cite>ds</cite>&gt; <q>I'd rather not write code that "discovers" features.  I'd rather have a simple obvious function that return a bit pattern</q></li>
<li class="message">[<a href="#T00:32:15" id="T00:32:15"><abbr title="2009-03-25T00:32:15+00:00">00:32:15</abbr></a>] &lt;<cite>raster</cite>&gt; <q>as i expectr the lib to be oinitted before you launch off into any thread land</q></li>
<li class="message">[<a href="#T00:32:19" id="T00:32:19"><abbr title="2009-03-25T00:32:19+00:00">00:32:19</abbr></a>] &lt;<cite>raster</cite>&gt; <q>its not a problem</q></li>
<li class="message">[<a href="#T00:32:21" id="T00:32:21"><abbr title="2009-03-25T00:32:21+00:00">00:32:21</abbr></a>] &lt;<cite>mru</cite>&gt; <q>yes, it's called MRC</q></li>
<li class="message">[<a href="#T00:32:37" id="T00:32:37"><abbr title="2009-03-25T00:32:37+00:00">00:32:37</abbr></a>] &lt;<cite>mru</cite>&gt; <q>raster: that's not a valid assumption</q></li>
<li class="message">[<a href="#T00:33:01" id="T00:33:01"><abbr title="2009-03-25T00:33:01+00:00">00:33:01</abbr></a>] &lt;<cite>raster</cite>&gt; <q>in my case it is</q></li>
<li class="message">[<a href="#T00:33:03" id="T00:33:03"><abbr title="2009-03-25T00:33:03+00:00">00:33:03</abbr></a>] &lt;<cite>raster</cite>&gt; <q>as its a requirement</q></li>
<li class="message">[<a href="#T00:33:08" id="T00:33:08"><abbr title="2009-03-25T00:33:08+00:00">00:33:08</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I've written code that fires up gtk in semi-isolation if needed</q></li>
<li class="message">[<a href="#T00:33:10" id="T00:33:10"><abbr title="2009-03-25T00:33:10+00:00">00:33:10</abbr></a>] &lt;<cite>raster</cite>&gt; <q>as the lib isnt threadsafe</q></li>
<li class="message">[<a href="#T00:33:37" id="T00:33:37"><abbr title="2009-03-25T00:33:37+00:00">00:33:37</abbr></a>] &lt;<cite>mru</cite>&gt; <q>your case isn't everyone's</q></li>
<li class="message">[<a href="#T00:33:42" id="T00:33:42"><abbr title="2009-03-25T00:33:42+00:00">00:33:42</abbr></a>] &lt;<cite>raster</cite>&gt; <q>i know</q></li>
<li class="message">[<a href="#T00:33:43" id="T00:33:43"><abbr title="2009-03-25T00:33:43+00:00">00:33:43</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T00:33:50" id="T00:33:50"><abbr title="2009-03-25T00:33:50+00:00">00:33:50</abbr></a>] &lt;<cite>russ</cite>&gt; <q>maybe a sacrificial process?</q></li>
<li class="message">[<a href="#T00:33:51" id="T00:33:51"><abbr title="2009-03-25T00:33:51+00:00">00:33:51</abbr></a>] &lt;<cite>raster</cite>&gt; <q>but u can use __init()</q></li>
<li class="message">[<a href="#T00:33:58" id="T00:33:58"><abbr title="2009-03-25T00:33:58+00:00">00:33:58</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ld.so will call it prior to main()</q></li>
<li class="message">[<a href="#T00:34:03" id="T00:34:03"><abbr title="2009-03-25T00:34:03+00:00">00:34:03</abbr></a>] &lt;<cite>mru</cite>&gt; <q>not on random-obscure-os</q></li>
<li class="message">[<a href="#T00:34:12" id="T00:34:12"><abbr title="2009-03-25T00:34:12+00:00">00:34:12</abbr></a>] &lt;<cite>raster</cite>&gt; <q>if u link</q></li>
<li class="message">[<a href="#T00:34:21" id="T00:34:21"><abbr title="2009-03-25T00:34:21+00:00">00:34:21</abbr></a>] &lt;<cite>raster</cite>&gt; <q>if its an indirect dep from a dlopen()Ed module</q></li>
<li class="message">[<a href="#T00:34:26" id="T00:34:26"><abbr title="2009-03-25T00:34:26+00:00">00:34:26</abbr></a>] &lt;<cite>raster</cite>&gt; <q>it will happen ad lopen() time</q></li>
<li class="message">[<a href="#T00:34:29" id="T00:34:29"><abbr title="2009-03-25T00:34:29+00:00">00:34:29</abbr></a>] &lt;<cite>mru</cite>&gt; <q>hacking random-obscure-kernel to emulate a few mrc opcodes is much easier</q></li>
<li class="message">[<a href="#T00:34:31" id="T00:34:31"><abbr title="2009-03-25T00:34:31+00:00">00:34:31</abbr></a>] &lt;<cite>raster</cite>&gt; <q>at dlopen time</q></li>
<li class="message">[<a href="#T00:34:45" id="T00:34:45"><abbr title="2009-03-25T00:34:45+00:00">00:34:45</abbr></a>] &lt;<cite>mru</cite>&gt; <q>who says you have dlopen at all</q></li>
<li class="message">[<a href="#T00:34:49" id="T00:34:49"><abbr title="2009-03-25T00:34:49+00:00">00:34:49</abbr></a>] &lt;<cite>raster</cite>&gt; <q>the problem is universality</q></li>
<li class="message">[<a href="#T00:34:50" id="T00:34:50"><abbr title="2009-03-25T00:34:50+00:00">00:34:50</abbr></a>] &lt;<cite>mru</cite>&gt; <q>who says you're using elf?</q></li>
<li class="message">[<a href="#T00:34:56" id="T00:34:56"><abbr title="2009-03-25T00:34:56+00:00">00:34:56</abbr></a>] &lt;<cite>mru</cite>&gt; <q>mrc is universal</q></li>
<li class="message">[<abbr title="2009-03-25T00:34:56+00:00">00:34:56</abbr>] &lt;<cite>raster</cite>&gt; <q>hehehehe</q></li>
<li class="message">[<a href="#T00:34:59" id="T00:34:59"><abbr title="2009-03-25T00:34:59+00:00">00:34:59</abbr></a>] &lt;<cite>raster</cite>&gt; <q>in my case</q></li>
<li class="message">[<a href="#T00:35:00" id="T00:35:00"><abbr title="2009-03-25T00:35:00+00:00">00:35:00</abbr></a>] &lt;<cite>raster</cite>&gt; <q>no dlopen</q></li>
<li class="message">[<a href="#T00:35:01" id="T00:35:01"><abbr title="2009-03-25T00:35:01+00:00">00:35:01</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's architectural</q></li>
<li class="message">[<a href="#T00:35:04" id="T00:35:04"><abbr title="2009-03-25T00:35:04+00:00">00:35:04</abbr></a>] &lt;<cite>raster</cite>&gt; <q>no go</q></li>
<li class="message">[<abbr title="2009-03-25T00:35:04+00:00">00:35:04</abbr>] &lt;<cite>raster</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T00:35:19" id="T00:35:19"><abbr title="2009-03-25T00:35:19+00:00">00:35:19</abbr></a>] &lt;<cite>raster</cite>&gt; <q>umm</q></li>
<li class="message">[<a href="#T00:35:27" id="T00:35:27"><abbr title="2009-03-25T00:35:27+00:00">00:35:27</abbr></a>] &lt;<cite>raster</cite>&gt; <q>universal as the same across multiple unix os's</q></li>
<li class="message">[<a href="#T00:35:30" id="T00:35:30"><abbr title="2009-03-25T00:35:30+00:00">00:35:30</abbr></a>] &lt;<cite>raster</cite>&gt; <q>multiple architectures</q></li>
<li class="message">[<a href="#T00:35:37" id="T00:35:37"><abbr title="2009-03-25T00:35:37+00:00">00:35:37</abbr></a>] &lt;<cite>raster</cite>&gt; <q>the problem is no such thnig exists</q></li>
<li class="message">[<a href="#T00:35:38" id="T00:35:38"><abbr title="2009-03-25T00:35:38+00:00">00:35:38</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:(</q></li>
<li class="message">[<a href="#T00:35:46" id="T00:35:46"><abbr title="2009-03-25T00:35:46+00:00">00:35:46</abbr></a>] &lt;<cite>raster</cite>&gt; <q>(for discovering xpu features)</q></li>
<li class="message">[<a href="#T00:35:50" id="T00:35:50"><abbr title="2009-03-25T00:35:50+00:00">00:35:50</abbr></a>] &lt;<cite>raster</cite>&gt; <q>beyond /proc/cpuinfo</q></li>
<li class="message">[<a href="#T00:35:53" id="T00:35:53"><abbr title="2009-03-25T00:35:53+00:00">00:35:53</abbr></a>] &lt;<cite>raster</cite>&gt; <q>and thats linux only</q></li>
<li class="quit">[<a href="#T00:38:13" id="T00:38:13"><abbr title="2009-03-25T00:38:13+00:00">00:38:13</abbr></a>] <span>* turran (n=jl@unaffiliated/turran) Quit ("Leaving")</span></li>
<li class="message">[<a href="#T00:39:16" id="T00:39:16"><abbr title="2009-03-25T00:39:16+00:00">00:39:16</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I believe staying closer to the hardware will give better chances of others following</q></li>
<li class="message">[<a href="#T00:39:35" id="T00:39:35"><abbr title="2009-03-25T00:39:35+00:00">00:39:35</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I mean, try to implement /proc/cpuinfo on an os without a filesystem</q></li>
<li class="message">[<a href="#T00:40:02" id="T00:40:02"><abbr title="2009-03-25T00:40:02+00:00">00:40:02</abbr></a>] &lt;<cite>mru</cite>&gt; <q>we're talking arm here, so it's not that far-fetched</q></li>
<li class="message">[<a href="#T00:41:25" id="T00:41:25"><abbr title="2009-03-25T00:41:25+00:00">00:41:25</abbr></a>] &lt;<cite>russ</cite>&gt; <q>mru: make tight loops that check relative instruction execution time in order to generate a fingerprint for each processor</q></li>
<li class="message">[<a href="#T00:42:14" id="T00:42:14"><abbr title="2009-03-25T00:42:14+00:00">00:42:14</abbr></a>] &lt;<cite>mru</cite>&gt; <q>haha</q></li>
<li class="quit">[<a href="#T00:47:30" id="T00:47:30"><abbr title="2009-03-25T00:47:30+00:00">00:47:30</abbr></a>] <span>* guillaum1 (n=Guillaum@AMontsouris-153-1-55-75.w86-212.abo.wanadoo.fr) Quit ("Leaving.")</span></li>
<li class="join">[<a href="#T00:47:52" id="T00:47:52"><abbr title="2009-03-25T00:47:52+00:00">00:47:52</abbr></a>] <span>* guillaum1 (n=gl@AMontsouris-153-1-55-75.w86-212.abo.wanadoo.fr) has joined #beagle</span></li>
<li class="quit">[<a href="#T00:54:57" id="T00:54:57"><abbr title="2009-03-25T00:54:57+00:00">00:54:57</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) Quit ()</span></li>
<li class="message">[<a href="#T00:55:53" id="T00:55:53"><abbr title="2009-03-25T00:55:53+00:00">00:55:53</abbr></a>] &lt;<cite>ds</cite>&gt; <q>One can access the AUXV on powerpc using /proc/self/auxv, although that's still needlessly Linux-specific</q></li>
<li class="message">[<a href="#T00:56:39" id="T00:56:39"><abbr title="2009-03-25T00:56:39+00:00">00:56:39</abbr></a>] &lt;<cite>mru</cite>&gt; <q>as I said, linux on powerpc emulates the cpu identification instructions</q></li>
<li class="message">[<a href="#T00:56:57" id="T00:56:57"><abbr title="2009-03-25T00:56:57+00:00">00:56:57</abbr></a>] &lt;<cite>mru</cite>&gt; <q>no need to mess around with auxv</q></li>
<li class="message">[<a href="#T00:58:10" id="T00:58:10"><abbr title="2009-03-25T00:58:10+00:00">00:58:10</abbr></a>] &lt;<cite>ds</cite>&gt; <q>it changes what I said earlier, is all</q></li>
<li class="message">[<a href="#T01:00:01" id="T01:00:01"><abbr title="2009-03-25T01:00:01+00:00">01:00:01</abbr></a>] &lt;<cite>ds</cite>&gt; <q>one problem with relying on CPU identification instructions is that you risk a SIGILL on older kernels</q></li>
<li class="message">[<a href="#T01:00:25" id="T01:00:25"><abbr title="2009-03-25T01:00:25+00:00">01:00:25</abbr></a>] &lt;<cite>mru</cite>&gt; <q>you risk the auxv not being there too</q></li>
<li class="message">[<a href="#T01:00:53" id="T01:00:53"><abbr title="2009-03-25T01:00:53+00:00">01:00:53</abbr></a>] &lt;<cite>ds</cite>&gt; <q>at least in that case you don't abort</q></li>
<li class="message">[<a href="#T01:01:42" id="T01:01:42"><abbr title="2009-03-25T01:01:42+00:00">01:01:42</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ds:  but sigill is unreliable!</q></li>
<li class="message">[<a href="#T01:01:49" id="T01:01:49"><abbr title="2009-03-25T01:01:49+00:00">01:01:49</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T01:02:00" id="T01:02:00"><abbr title="2009-03-25T01:02:00+00:00">01:02:00</abbr></a>] &lt;<cite>mru</cite>&gt; <q>only if you try to trap it</q></li>
<li class="message">[<a href="#T01:02:47" id="T01:02:47"><abbr title="2009-03-25T01:02:47+00:00">01:02:47</abbr></a>] &lt;<cite>russ</cite>&gt; <q>like I said, sacrificial process</q></li>
<li class="message">[<a href="#T01:02:55" id="T01:02:55"><abbr title="2009-03-25T01:02:55+00:00">01:02:55</abbr></a>] &lt;<cite>raster</cite>&gt; <q>but an app that sigills... isnt much use</q></li>
<li class="message">[<a href="#T01:03:16" id="T01:03:16"><abbr title="2009-03-25T01:03:16+00:00">01:03:16</abbr></a>] &lt;<cite>russ</cite>&gt; <q>open file descriptor, fork, run instruction, exit 0</q></li>
<li class="message">[<a href="#T01:03:25" id="T01:03:25"><abbr title="2009-03-25T01:03:25+00:00">01:03:25</abbr></a>] &lt;<cite>russ</cite>&gt; <q>parent process checks return code</q></li>
<li class="message">[<a href="#T01:03:28" id="T01:03:28"><abbr title="2009-03-25T01:03:28+00:00">01:03:28</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's mainly distro maintainers pushing for this</q></li>
<li class="message">[<a href="#T01:03:39" id="T01:03:39"><abbr title="2009-03-25T01:03:39+00:00">01:03:39</abbr></a>] &lt;<cite>mru</cite>&gt; <q>they want to ship the same binaries to run on many processors</q></li>
<li class="message">[<a href="#T01:03:48" id="T01:03:48"><abbr title="2009-03-25T01:03:48+00:00">01:03:48</abbr></a>] &lt;<cite>mru</cite>&gt; <q>they can make sure they also ship a suitable kernel</q></li>
<li class="message">[<a href="#T01:04:25" id="T01:04:25"><abbr title="2009-03-25T01:04:25+00:00">01:04:25</abbr></a>] &lt;<cite>raster</cite>&gt; <q>mru:  i do agree though that this is a problem</q></li>
<li class="message">[<a href="#T01:04:29" id="T01:04:29"><abbr title="2009-03-25T01:04:29+00:00">01:04:29</abbr></a>] &lt;<cite>raster</cite>&gt; <q>in the arm world its worse</q></li>
<li class="message">[<a href="#T01:04:39" id="T01:04:39"><abbr title="2009-03-25T01:04:39+00:00">01:04:39</abbr></a>] &lt;<cite>raster</cite>&gt; <q>as there are now so many variations of cpu extensions/generations</q></li>
<li class="message">[<a href="#T01:04:46" id="T01:04:46"><abbr title="2009-03-25T01:04:46+00:00">01:04:46</abbr></a>] &lt;<cite>raster</cite>&gt; <q>at least on x86 its "simple"</q></li>
<li class="message">[<a href="#T01:04:48" id="T01:04:48"><abbr title="2009-03-25T01:04:48+00:00">01:04:48</abbr></a>] &lt;<cite>russ</cite>&gt; <q>raster: don't forget all the floating point formats</q></li>
<li class="message">[<a href="#T01:04:50" id="T01:04:50"><abbr title="2009-03-25T01:04:50+00:00">01:04:50</abbr></a>] &lt;<cite>raster</cite>&gt; <q>and ppc is trivial</q></li>
<li class="message">[<a href="#T01:05:07" id="T01:05:07"><abbr title="2009-03-25T01:05:07+00:00">01:05:07</abbr></a>] &lt;<cite>raster</cite>&gt; <q>russ: that too</q></li>
<li class="message">[<a href="#T01:05:25" id="T01:05:25"><abbr title="2009-03-25T01:05:25+00:00">01:05:25</abbr></a>] &lt;<cite>raster</cite>&gt; <q>but at least it should be sane to ship 1 binary for all arm paltforms</q></li>
<li class="message">[<a href="#T01:05:33" id="T01:05:33"><abbr title="2009-03-25T01:05:33+00:00">01:05:33</abbr></a>] &lt;<cite>raster</cite>&gt; <q>the problem is.. it isn't</q></li>
<li class="message">[<a href="#T01:05:34" id="T01:05:34"><abbr title="2009-03-25T01:05:34+00:00">01:05:34</abbr></a>] &lt;<cite>raster</cite>&gt; <q>:(</q></li>
<li class="message">[<a href="#T01:05:45" id="T01:05:45"><abbr title="2009-03-25T01:05:45+00:00">01:05:45</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it also doesn't make sense</q></li>
<li class="message">[<a href="#T01:05:46" id="T01:05:46"><abbr title="2009-03-25T01:05:46+00:00">01:05:46</abbr></a>] &lt;<cite>raster</cite>&gt; <q>i can specifically deal with neon at runtime</q></li>
<li class="message">[<a href="#T01:05:50" id="T01:05:50"><abbr title="2009-03-25T01:05:50+00:00">01:05:50</abbr></a>] &lt;<cite>raster</cite>&gt; <q>(or fall back to normal c)</q></li>
<li class="message">[<a href="#T01:05:52" id="T01:05:52"><abbr title="2009-03-25T01:05:52+00:00">01:05:52</abbr></a>] &lt;<cite>raster</cite>&gt; <q>and so on</q></li>
<li class="message">[<a href="#T01:06:07" id="T01:06:07"><abbr title="2009-03-25T01:06:07+00:00">01:06:07</abbr></a>] &lt;<cite>mru</cite>&gt; <q>armcc generates 10% faster code if allowed to use neon</q></li>
<li class="message">[<a href="#T01:06:39" id="T01:06:39"><abbr title="2009-03-25T01:06:39+00:00">01:06:39</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ir auto uses neon if it can?</q></li>
<li class="message">[<a href="#T01:06:41" id="T01:06:41"><abbr title="2009-03-25T01:06:41+00:00">01:06:41</abbr></a>] &lt;<cite>raster</cite>&gt; <q>it</q></li>
<li class="message">[<a href="#T01:06:49" id="T01:06:49"><abbr title="2009-03-25T01:06:49+00:00">01:06:49</abbr></a>] &lt;<cite>mru</cite>&gt; <q>if you tell it</q></li>
<li class="join">[<a href="#T01:06:52" id="T01:06:52"><abbr title="2009-03-25T01:06:52+00:00">01:06:52</abbr></a>] <span>* openfree (i=cb6ea385@gateway/web/ajax/mibbit.com/x-a49c940d31e0f503) has joined #beagle</span></li>
<li class="message">[<a href="#T01:06:58" id="T01:06:58"><abbr title="2009-03-25T01:06:58+00:00">01:06:58</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ok</q></li>
<li class="message">[<a href="#T01:06:59" id="T01:06:59"><abbr title="2009-03-25T01:06:59+00:00">01:06:59</abbr></a>] &lt;<cite>raster</cite>&gt; <q>thats cool</q></li>
<li class="message">[<a href="#T01:07:05" id="T01:07:05"><abbr title="2009-03-25T01:07:05+00:00">01:07:05</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it can vectorise some kinds of loops</q></li>
<li class="message">[<a href="#T01:07:18" id="T01:07:18"><abbr title="2009-03-25T01:07:18+00:00">01:07:18</abbr></a>] &lt;<cite>mru</cite>&gt; <q>gcc can too in theory</q></li>
<li class="message">[<a href="#T01:07:27" id="T01:07:27"><abbr title="2009-03-25T01:07:27+00:00">01:07:27</abbr></a>] &lt;<cite>mru</cite>&gt; <q>in practice it's no faster, only buggy</q></li>
<li class="message">[<a href="#T01:07:36" id="T01:07:36"><abbr title="2009-03-25T01:07:36+00:00">01:07:36</abbr></a>] &lt;<cite>raster</cite>&gt; <q>hehehehe</q></li>
<li class="message">[<a href="#T01:07:47" id="T01:07:47"><abbr title="2009-03-25T01:07:47+00:00">01:07:47</abbr></a>] &lt;<cite>raster</cite>&gt; <q>from a distro point of view tho</q></li>
<li class="message">[<a href="#T01:07:48" id="T01:07:48"><abbr title="2009-03-25T01:07:48+00:00">01:07:48</abbr></a>] &lt;<cite>raster</cite>&gt; <q>it is a problem</q></li>
<li class="message">[<a href="#T01:07:54" id="T01:07:54"><abbr title="2009-03-25T01:07:54+00:00">01:07:54</abbr></a>] &lt;<cite>raster</cite>&gt; <q>most wopuld give up 10%</q></li>
<li class="message">[<a href="#T01:08:04" id="T01:08:04"><abbr title="2009-03-25T01:08:04+00:00">01:08:04</abbr></a>] &lt;<cite>mru</cite>&gt; <q>distros should do several buidls</q></li>
<li class="message">[<a href="#T01:08:06" id="T01:08:06"><abbr title="2009-03-25T01:08:06+00:00">01:08:06</abbr></a>] &lt;<cite>raster</cite>&gt; <q>if they could just handle an arm distro universally</q></li>
<li class="message">[<a href="#T01:08:22" id="T01:08:22"><abbr title="2009-03-25T01:08:22+00:00">01:08:22</abbr></a>] &lt;<cite>mru</cite>&gt; <q>even gcc makes good use of armv6 instructions</q></li>
<li class="message">[<a href="#T01:08:28" id="T01:08:28"><abbr title="2009-03-25T01:08:28+00:00">01:08:28</abbr></a>] &lt;<cite>raster</cite>&gt; <q>sure</q></li>
<li class="message">[<a href="#T01:08:37" id="T01:08:37"><abbr title="2009-03-25T01:08:37+00:00">01:08:37</abbr></a>] &lt;<cite>raster</cite>&gt; <q>but then u get arm vs thumb</q></li>
<li class="message">[<a href="#T01:08:42" id="T01:08:42"><abbr title="2009-03-25T01:08:42+00:00">01:08:42</abbr></a>] &lt;<cite>raster</cite>&gt; <q>and obai vs eabi</q></li>
<li class="message">[<a href="#T01:08:48" id="T01:08:48"><abbr title="2009-03-25T01:08:48+00:00">01:08:48</abbr></a>] &lt;<cite>mru</cite>&gt; <q>performance is scarce enough as it is on arm</q></li>
<li class="message">[<a href="#T01:08:51" id="T01:08:51"><abbr title="2009-03-25T01:08:51+00:00">01:08:51</abbr></a>] &lt;<cite>raster</cite>&gt; <q>v4, v5, v6 anf v7</q></li>
<li class="message">[<a href="#T01:08:56" id="T01:08:56"><abbr title="2009-03-25T01:08:56+00:00">01:08:56</abbr></a>] &lt;<cite>mru</cite>&gt; <q>only debian uses oabi</q></li>
<li class="message">[<a href="#T01:08:59" id="T01:08:59"><abbr title="2009-03-25T01:08:59+00:00">01:08:59</abbr></a>] &lt;<cite>raster</cite>&gt; <q>and then v7 with or withit neon</q></li>
<li class="message">[<a href="#T01:09:04" id="T01:09:04"><abbr title="2009-03-25T01:09:04+00:00">01:09:04</abbr></a>] &lt;<cite>raster</cite>&gt; <q>v6 with or without vfp</q></li>
<li class="message">[<abbr title="2009-03-25T01:09:04+00:00">01:09:04</abbr>] &lt;<cite>vlad_</cite>&gt; <q>raster: it depends though, distros have compiled specific libs with per-cpu flags in the past</q></li>
<li class="message">[<a href="#T01:09:05" id="T01:09:05"><abbr title="2009-03-25T01:09:05+00:00">01:09:05</abbr></a>] &lt;<cite>raster</cite>&gt; <q>etc. etc.</q></li>
<li class="message">[<a href="#T01:09:09" id="T01:09:09"><abbr title="2009-03-25T01:09:09+00:00">01:09:09</abbr></a>] &lt;<cite>vlad_</cite>&gt; <q>they wouldn't do it for the general case</q></li>
<li class="message">[<a href="#T01:09:10" id="T01:09:10"><abbr title="2009-03-25T01:09:10+00:00">01:09:10</abbr></a>] &lt;<cite>raster</cite>&gt; <q>its quite a matrix</q></li>
<li class="message">[<a href="#T01:09:11" id="T01:09:11"><abbr title="2009-03-25T01:09:11+00:00">01:09:11</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I've been happily ignoring debian for 28 years</q></li>
<li class="message">[<a href="#T01:09:17" id="T01:09:17"><abbr title="2009-03-25T01:09:17+00:00">01:09:17</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I reckon I can continue</q></li>
<li class="message">[<a href="#T01:09:30" id="T01:09:30"><abbr title="2009-03-25T01:09:30+00:00">01:09:30</abbr></a>] &lt;<cite>raster</cite>&gt; <q>hahahaha</q></li>
<li class="message">[<a href="#T01:09:50" id="T01:09:50"><abbr title="2009-03-25T01:09:50+00:00">01:09:50</abbr></a>] &lt;<cite>russ</cite>&gt; <q>I thought debian had an eabi port too</q></li>
<li class="message">[<a href="#T01:09:52" id="T01:09:52"><abbr title="2009-03-25T01:09:52+00:00">01:09:52</abbr></a>] &lt;<cite>mru</cite>&gt; <q>the vX variants are all supersets of the previous ones</q></li>
<li class="message">[<a href="#T01:10:24" id="T01:10:24"><abbr title="2009-03-25T01:10:24+00:00">01:10:24</abbr></a>] &lt;<cite>mru</cite>&gt; <q>eabi/oabi is irrelevant to this discussion</q></li>
<li class="message">[<a href="#T01:10:38" id="T01:10:38"><abbr title="2009-03-25T01:10:38+00:00">01:10:38</abbr></a>] &lt;<cite>mru</cite>&gt; <q>you just pick one and build everything like that</q></li>
<li class="message">[<a href="#T01:10:46" id="T01:10:46"><abbr title="2009-03-25T01:10:46+00:00">01:10:46</abbr></a>] &lt;<cite>mru</cite>&gt; <q>sane people pick eabi</q></li>
<li class="message">[<a href="#T01:10:49" id="T01:10:49"><abbr title="2009-03-25T01:10:49+00:00">01:10:49</abbr></a>] &lt;<cite>raster</cite>&gt; <q>sure</q></li>
<li class="message">[<a href="#T01:11:05" id="T01:11:05"><abbr title="2009-03-25T01:11:05+00:00">01:11:05</abbr></a>] &lt;<cite>raster</cite>&gt; <q>i'm just pointing out the myriad of thnigs they need to build</q></li>
<li class="message">[<a href="#T01:11:27" id="T01:11:27"><abbr title="2009-03-25T01:11:27+00:00">01:11:27</abbr></a>] &lt;<cite>mru</cite>&gt; <q>you're forgetting vfpv2, vfpv3, vfpv3_d16</q></li>
<li class="message">[<a href="#T01:11:34" id="T01:11:34"><abbr title="2009-03-25T01:11:34+00:00">01:11:34</abbr></a>] &lt;<cite>mru</cite>&gt; <q>integer-only neon, ...</q></li>
<li class="message">[<a href="#T01:11:51" id="T01:11:51"><abbr title="2009-03-25T01:11:51+00:00">01:11:51</abbr></a>] &lt;<cite>raster</cite>&gt; <q>yes</q></li>
<li class="message">[<a href="#T01:11:58" id="T01:11:58"><abbr title="2009-03-25T01:11:58+00:00">01:11:58</abbr></a>] &lt;<cite>raster</cite>&gt; <q>i have only done some of them</q></li>
<li class="message">[<a href="#T01:12:08" id="T01:12:08"><abbr title="2009-03-25T01:12:08+00:00">01:12:08</abbr></a>] &lt;<cite>mru</cite>&gt; <q>most of them don't actually exist</q></li>
<li class="message">[<a href="#T01:12:10" id="T01:12:10"><abbr title="2009-03-25T01:12:10+00:00">01:12:10</abbr></a>] &lt;<cite>raster</cite>&gt; <q>my poiunt was its a very large set of variants and combos</q></li>
<li class="message">[<a href="#T01:12:11" id="T01:12:11"><abbr title="2009-03-25T01:12:11+00:00">01:12:11</abbr></a>] &lt;<cite>mru</cite>&gt; <q>in silicon</q></li>
<li class="message">[<a href="#T01:12:15" id="T01:12:15"><abbr title="2009-03-25T01:12:15+00:00">01:12:15</abbr></a>] &lt;<cite>raster</cite>&gt; <q>ls</q></li>
<li class="quit">[<a href="#T01:12:43" id="T01:12:43"><abbr title="2009-03-25T01:12:43+00:00">01:12:43</abbr></a>] <span>* [-ip-] (n=ts@mnhm-590e13fe.pool.einsundeins.de) Quit ()</span></li>
<li class="join">[<a href="#T01:13:12" id="T01:13:12"><abbr title="2009-03-25T01:13:12+00:00">01:13:12</abbr></a>] <span>* bazbell (n=a0192809@nat/ti/x-9e38f892c5ab6846) has joined #beagle</span></li>
<li class="quit">[<a href="#T01:13:41" id="T01:13:41"><abbr title="2009-03-25T01:13:41+00:00">01:13:41</abbr></a>] <span>* bazbell (n=a0192809@nat/ti/x-9e38f892c5ab6846) Quit (Client Quit)</span></li>
<li class="join">[<a href="#T01:14:18" id="T01:14:18"><abbr title="2009-03-25T01:14:18+00:00">01:14:18</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) has joined #beagle</span></li>
<li class="message">[<a href="#T01:17:21" id="T01:17:21"><abbr title="2009-03-25T01:17:21+00:00">01:17:21</abbr></a>] &lt;<cite>russ</cite>&gt; <q>with most stuff though, you only need to compile a subset of packages with optimization</q></li>
<li class="quit">[<a href="#T01:17:57" id="T01:17:57"><abbr title="2009-03-25T01:17:57+00:00">01:17:57</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) Quit (Client Quit)</span></li>
<li class="join">[<a href="#T01:19:35" id="T01:19:35"><abbr title="2009-03-25T01:19:35+00:00">01:19:35</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) has joined #beagle</span></li>
<li class="quit">[<a href="#T01:21:02" id="T01:21:02"><abbr title="2009-03-25T01:21:02+00:00">01:21:02</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) Quit (Client Quit)</span></li>
<li class="message">[<a href="#T01:23:17" id="T01:23:17"><abbr title="2009-03-25T01:23:17+00:00">01:23:17</abbr></a>] &lt;<cite>mru</cite>&gt; <q>koen would disagree</q></li>
<li class="message">[<a href="#T01:24:25" id="T01:24:25"><abbr title="2009-03-25T01:24:25+00:00">01:24:25</abbr></a>] &lt;<cite>russ</cite>&gt; <q>does libpam really need to be compiled with optimization?</q></li>
<li class="message">[<a href="#T01:25:16" id="T01:25:16"><abbr title="2009-03-25T01:25:16+00:00">01:25:16</abbr></a>] &lt;<cite>mru</cite>&gt; <q>maybe not</q></li>
<li class="message">[<a href="#T01:25:54" id="T01:25:54"><abbr title="2009-03-25T01:25:54+00:00">01:25:54</abbr></a>] &lt;<cite>mru</cite>&gt; <q>but extending your argument we wouldn't need to use the computer at all</q></li>
<li class="message">[<a href="#T01:27:14" id="T01:27:14"><abbr title="2009-03-25T01:27:14+00:00">01:27:14</abbr></a>] &lt;<cite>mru</cite>&gt; <q>but lets find out how much difference the optimisation target actually makes</q></li>
<li class="join">[<a href="#T01:27:56" id="T01:27:56"><abbr title="2009-03-25T01:27:56+00:00">01:27:56</abbr></a>] <span>* khasim (n=a0393720@192.163.20.231) has joined #beagle</span></li>
<li class="message">[<a href="#T01:28:07" id="T01:28:07"><abbr title="2009-03-25T01:28:07+00:00">01:28:07</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I have four ffmpeg builds, optimised for v4, v5, v6, and v7</q></li>
<li class="message">[<a href="#T01:28:32" id="T01:28:32"><abbr title="2009-03-25T01:28:32+00:00">01:28:32</abbr></a>] &lt;<cite>mru</cite>&gt; <q>all hand-written assembler disabled for this test</q></li>
<li class="message">[<a href="#T01:28:38" id="T01:28:38"><abbr title="2009-03-25T01:28:38+00:00">01:28:38</abbr></a>] &lt;<cite>mru</cite>&gt; <q>since we're testing the compiler</q></li>
<li class="message">[<a href="#T01:32:40" id="T01:32:40"><abbr title="2009-03-25T01:32:40+00:00">01:32:40</abbr></a>] &lt;<cite>russ</cite>&gt; <q>are you building them against an optimized libc?</q></li>
<li class="message">[<a href="#T01:32:52" id="T01:32:52"><abbr title="2009-03-25T01:32:52+00:00">01:32:52</abbr></a>] &lt;<cite>russ</cite>&gt; <q>optimized memcpy and such?</q></li>
<li class="message">[<a href="#T01:32:59" id="T01:32:59"><abbr title="2009-03-25T01:32:59+00:00">01:32:59</abbr></a>] &lt;<cite>mru</cite>&gt; <q>yes, but ffmpeg spends very little time in libc</q></li>
<li class="message">[<a href="#T01:34:01" id="T01:34:01"><abbr title="2009-03-25T01:34:01+00:00">01:34:01</abbr></a>] &lt;<cite>mru</cite>&gt; <q>1 or 2 percent</q></li>
<li class="message">[<a href="#T01:34:27" id="T01:34:27"><abbr title="2009-03-25T01:34:27+00:00">01:34:27</abbr></a>] &lt;<cite>russ</cite>&gt; <q>does that count the .a stuff too?</q></li>
<li class="message">[<a href="#T01:34:42" id="T01:34:42"><abbr title="2009-03-25T01:34:42+00:00">01:34:42</abbr></a>] &lt;<cite>russ</cite>&gt; <q>eg, libgcc.a?</q></li>
<li class="message">[<a href="#T01:34:46" id="T01:34:46"><abbr title="2009-03-25T01:34:46+00:00">01:34:46</abbr></a>] &lt;<cite>mru</cite>&gt; <q>fully static link</q></li>
<li class="message">[<a href="#T01:35:10" id="T01:35:10"><abbr title="2009-03-25T01:35:10+00:00">01:35:10</abbr></a>] &lt;<cite>mru</cite>&gt; <q>calling memcpy() is more or less a bug in ffmpeg</q></li>
<li class="message">[<a href="#T01:35:17" id="T01:35:17"><abbr title="2009-03-25T01:35:17+00:00">01:35:17</abbr></a>] &lt;<cite>russ</cite>&gt; <q>what about softfloat inlining?</q></li>
<li class="message">[<a href="#T01:35:41" id="T01:35:41"><abbr title="2009-03-25T01:35:41+00:00">01:35:41</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I'm not testing floating point this time</q></li>
<li class="message">[<a href="#T01:35:53" id="T01:35:53"><abbr title="2009-03-25T01:35:53+00:00">01:35:53</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's pointless</q></li>
<li class="message">[<a href="#T01:36:04" id="T01:36:04"><abbr title="2009-03-25T01:36:04+00:00">01:36:04</abbr></a>] &lt;<cite>mru</cite>&gt; <q>everybody knows vfp is many times faster than softfloat</q></li>
<li class="message">[<a href="#T01:36:23" id="T01:36:23"><abbr title="2009-03-25T01:36:23+00:00">01:36:23</abbr></a>] &lt;<cite>russ</cite>&gt; <q>ah, so you are running them all on a v7</q></li>
<li class="message">[<a href="#T01:36:27" id="T01:36:27"><abbr title="2009-03-25T01:36:27+00:00">01:36:27</abbr></a>] &lt;<cite>mru</cite>&gt; <q>yes</q></li>
<li class="message">[<a href="#T01:36:30" id="T01:36:30"><abbr title="2009-03-25T01:36:30+00:00">01:36:30</abbr></a>] &lt;<cite>mru</cite>&gt; <q>that's the point</q></li>
<li class="message">[<a href="#T01:36:43" id="T01:36:43"><abbr title="2009-03-25T01:36:43+00:00">01:36:43</abbr></a>] &lt;<cite>russ</cite>&gt; <q>but wouldn't a true v4 binary have softfloat?</q></li>
<li class="message">[<a href="#T01:36:53" id="T01:36:53"><abbr title="2009-03-25T01:36:53+00:00">01:36:53</abbr></a>] &lt;<cite>mru</cite>&gt; <q>yes it would</q></li>
<li class="message">[<a href="#T01:36:58" id="T01:36:58"><abbr title="2009-03-25T01:36:58+00:00">01:36:58</abbr></a>] &lt;<cite>mru</cite>&gt; <q>and performance would suck</q></li>
<li class="message">[<a href="#T01:37:21" id="T01:37:21"><abbr title="2009-03-25T01:37:21+00:00">01:37:21</abbr></a>] &lt;<cite>russ</cite>&gt; <q>not compared to if you deployed it to a real v4 system and the kernel did all the floating point work</q></li>
<li class="message">[<a href="#T01:37:55" id="T01:37:55"><abbr title="2009-03-25T01:37:55+00:00">01:37:55</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's a waste of time to check whether vfp is faster than softfloat on cortex-a8</q></li>
<li class="message">[<a href="#T01:37:58" id="T01:37:58"><abbr title="2009-03-25T01:37:58+00:00">01:37:58</abbr></a>] &lt;<cite>mru</cite>&gt; <q>we know it is</q></li>
<li class="message">[<a href="#T01:38:09" id="T01:38:09"><abbr title="2009-03-25T01:38:09+00:00">01:38:09</abbr></a>] &lt;<cite>russ</cite>&gt; <q>maybe I'm confused by your end goal</q></li>
<li class="message">[<a href="#T01:38:34" id="T01:38:34"><abbr title="2009-03-25T01:38:34+00:00">01:38:34</abbr></a>] &lt;<cite>russ</cite>&gt; <q>if the choice is to distribute copies of ffmpeg optimized for different processors, or just one copy for all</q></li>
<li class="message">[<abbr title="2009-03-25T01:38:34+00:00">01:38:34</abbr>] &lt;<cite>mru</cite>&gt; <q>the end goal is to see how much faster normal integer code gets from targeting various cpus</q></li>
<li class="message">[<a href="#T01:38:42" id="T01:38:42"><abbr title="2009-03-25T01:38:42+00:00">01:38:42</abbr></a>] &lt;<cite>russ</cite>&gt; <q>ah</q></li>
<li class="message">[<a href="#T01:38:56" id="T01:38:56"><abbr title="2009-03-25T01:38:56+00:00">01:38:56</abbr></a>] &lt;<cite>mru</cite>&gt; <q>how much penalty A8 pays for running v4 code</q></li>
<li class="message">[<a href="#T01:39:23" id="T01:39:23"><abbr title="2009-03-25T01:39:23+00:00">01:39:23</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I already know that floating point code runs several times faster with vfp</q></li>
<li class="message">[<a href="#T01:39:34" id="T01:39:34"><abbr title="2009-03-25T01:39:34+00:00">01:39:34</abbr></a>] &lt;<cite>mru</cite>&gt; <q>nobody has ever disputed that</q></li>
<li class="message">[<a href="#T01:39:54" id="T01:39:54"><abbr title="2009-03-25T01:39:54+00:00">01:39:54</abbr></a>] &lt;<cite>russ</cite>&gt; <q>I just got caught up in the binary distribution part of the discussion</q></li>
<li class="message">[<a href="#T01:40:12" id="T01:40:12"><abbr title="2009-03-25T01:40:12+00:00">01:40:12</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's related</q></li>
<li class="join">[<a href="#T01:40:29" id="T01:40:29"><abbr title="2009-03-25T01:40:29+00:00">01:40:29</abbr></a>] <span>* jso (n=user@151.159.200.8) has joined #beagle</span></li>
<li class="message">[<a href="#T01:41:18" id="T01:41:18"><abbr title="2009-03-25T01:41:18+00:00">01:41:18</abbr></a>] &lt;<cite>russ</cite>&gt; <q>then my point would be that an ffmpeg complied to run across multiple arm versions would likely be compiled with softfloat</q></li>
<li class="message">[<a href="#T01:41:48" id="T01:41:48"><abbr title="2009-03-25T01:41:48+00:00">01:41:48</abbr></a>] &lt;<cite>mru</cite>&gt; <q>yes, but that won't affect the integer parts</q></li>
<li class="message">[<a href="#T01:42:00" id="T01:42:00"><abbr title="2009-03-25T01:42:00+00:00">01:42:00</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I don't need to measure what I already know</q></li>
<li class="message">[<a href="#T01:42:13" id="T01:42:13"><abbr title="2009-03-25T01:42:13+00:00">01:42:13</abbr></a>] &lt;<cite>russ</cite>&gt; <q>I guess I always figured that something like ffmpeg would have a fair deal of floating point</q></li>
<li class="message">[<a href="#T01:42:19" id="T01:42:19"><abbr title="2009-03-25T01:42:19+00:00">01:42:19</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it doesn't</q></li>
<li class="message">[<a href="#T01:42:24" id="T01:42:24"><abbr title="2009-03-25T01:42:24+00:00">01:42:24</abbr></a>] &lt;<cite>mru</cite>&gt; <q>only a few audio codecs do</q></li>
<li class="message">[<a href="#T01:42:36" id="T01:42:36"><abbr title="2009-03-25T01:42:36+00:00">01:42:36</abbr></a>] &lt;<cite>mru</cite>&gt; <q>e.g. mpeg2 decoding has virtually no floating point</q></li>
<li class="message">[<a href="#T01:42:56" id="T01:42:56"><abbr title="2009-03-25T01:42:56+00:00">01:42:56</abbr></a>] &lt;<cite>mru</cite>&gt; <q>there might be a few odd float ops somewhere</q></li>
<li class="message">[<a href="#T01:43:20" id="T01:43:20"><abbr title="2009-03-25T01:43:20+00:00">01:43:20</abbr></a>] &lt;<cite>mru</cite>&gt; <q>probably no more than one float op per million integer ops</q></li>
<li class="message">[<a href="#T01:43:30" id="T01:43:30"><abbr title="2009-03-25T01:43:30+00:00">01:43:30</abbr></a>] &lt;<cite>mru</cite>&gt; <q>so softfloat or not really doesn't matter there</q></li>
<li class="join">[<a href="#T01:45:26" id="T01:45:26"><abbr title="2009-03-25T01:45:26+00:00">01:45:26</abbr></a>] <span>* joesensport (n=joesensp@218.242.229.234) has joined #beagle</span></li>
<li class="message">[<a href="#T01:46:00" id="T01:46:00"><abbr title="2009-03-25T01:46:00+00:00">01:46:00</abbr></a>] &lt;<cite>mru</cite>&gt; <q>ffmpeg probably isn't representative of software on average of course</q></li>
<li class="message">[<a href="#T01:46:14" id="T01:46:14"><abbr title="2009-03-25T01:46:14+00:00">01:46:14</abbr></a>] &lt;<cite>mru</cite>&gt; <q>but it's usually a pretty good indicator of compiler performance</q></li>
<li class="message">[<a href="#T01:46:41" id="T01:46:41"><abbr title="2009-03-25T01:46:41+00:00">01:46:41</abbr></a>] &lt;<cite>mru</cite>&gt; <q>and it's easy to compile for a multitude of targets</q></li>
<li class="message">[<a href="#T01:47:05" id="T01:47:05"><abbr title="2009-03-25T01:47:05+00:00">01:47:05</abbr></a>] &lt;<cite>jso</cite>&gt; <q>actually, it would very much affect the integer portions.  GCC can optimize for NEON and lemme check the source, I believe there are some NEON opts included in ffmpeg.</q></li>
<li class="message">[<a href="#T01:48:00" id="T01:48:00"><abbr title="2009-03-25T01:48:00+00:00">01:48:00</abbr></a>] &lt;<cite>jso</cite>&gt; <q>Yes, several of the codec operations have been hand coded with NEON intrinsics.</q></li>
<li class="message">[<a href="#T01:48:19" id="T01:48:19"><abbr title="2009-03-25T01:48:19+00:00">01:48:19</abbr></a>] &lt;<cite>mru</cite>&gt; <q>ahahahaha</q></li>
<li class="message">[<a href="#T01:48:39" id="T01:48:39"><abbr title="2009-03-25T01:48:39+00:00">01:48:39</abbr></a>] &lt;<cite>mru</cite>&gt; <q>gcc optimise for neon, lol</q></li>
<li class="message">[<a href="#T01:48:45" id="T01:48:45"><abbr title="2009-03-25T01:48:45+00:00">01:48:45</abbr></a>] &lt;<cite>mru</cite>&gt; <q>jso: I wrote the ffmpeg neon code</q></li>
<li class="join">[<a href="#T01:49:15" id="T01:49:15"><abbr title="2009-03-25T01:49:15+00:00">01:49:15</abbr></a>] <span>* __alanc__ (n=a-campbe@nat/ti/x-4b411f0acbbf9e39) has joined #beagle</span></li>
<li class="message">[<a href="#T01:49:22" id="T01:49:22"><abbr title="2009-03-25T01:49:22+00:00">01:49:22</abbr></a>] &lt;<cite>mru</cite>&gt; <q>and I did *not* use intrinsics</q></li>
<li class="message">[<a href="#T01:49:38" id="T01:49:38"><abbr title="2009-03-25T01:49:38+00:00">01:49:38</abbr></a>] &lt;<cite>mru</cite>&gt; <q>gcc generates horrible code from them</q></li>
<li class="message">[<a href="#T01:51:16" id="T01:51:16"><abbr title="2009-03-25T01:51:16+00:00">01:51:16</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I benchmarked the gcc vectoriser earlier today</q></li>
<li class="message">[<a href="#T01:51:23" id="T01:51:23"><abbr title="2009-03-25T01:51:23+00:00">01:51:23</abbr></a>] &lt;<cite>ds</cite>&gt; <q>gcc generates horrible code for intrinsics on all architectures...</q></li>
<li class="message">[<abbr title="2009-03-25T01:51:23+00:00">01:51:23</abbr>] &lt;<cite>mru</cite>&gt; <q>it made *no* difference at all</q></li>
<li class="message">[<a href="#T01:51:24" id="T01:51:24"><abbr title="2009-03-25T01:51:24+00:00">01:51:24</abbr></a>] &lt;<cite>jso</cite>&gt; <q>Which version?</q></li>
<li class="message">[<a href="#T01:51:36" id="T01:51:36"><abbr title="2009-03-25T01:51:36+00:00">01:51:36</abbr></a>] &lt;<cite>mru</cite>&gt; <q>latest</q></li>
<li class="message">[<a href="#T01:51:47" id="T01:51:47"><abbr title="2009-03-25T01:51:47+00:00">01:51:47</abbr></a>] &lt;<cite>jso</cite>&gt; <q>which is?  I roll svn.</q></li>
<li class="message">[<a href="#T01:52:11" id="T01:52:11"><abbr title="2009-03-25T01:52:11+00:00">01:52:11</abbr></a>] &lt;<cite>mru</cite>&gt; <q>4.3.3 from gnu and 4.3.2+patches from codesourcery</q></li>
<li class="message">[<a href="#T01:52:35" id="T01:52:35"><abbr title="2009-03-25T01:52:35+00:00">01:52:35</abbr></a>] &lt;<cite>mru</cite>&gt; <q>the vectoriser does have some nasty bugs though</q></li>
<li class="message">[<a href="#T01:53:07" id="T01:53:07"><abbr title="2009-03-25T01:53:07+00:00">01:53:07</abbr></a>] &lt;<cite>jso</cite>&gt; <q>Word.  I believe the big changes in Tree Vectoriser is in 4.4.0, but who know when that'll be out given the FSF's bullshit as of late.</q></li>
<li class="message">[<a href="#T01:53:18" id="T01:53:18"><abbr title="2009-03-25T01:53:18+00:00">01:53:18</abbr></a>] &lt;<cite>mru</cite>&gt; <q>yeah</q></li>
<li class="message">[<a href="#T01:53:25" id="T01:53:25"><abbr title="2009-03-25T01:53:25+00:00">01:53:25</abbr></a>] &lt;<cite>mru</cite>&gt; <q>that's so stupid</q></li>
<li class="message">[<a href="#T01:53:54" id="T01:53:54"><abbr title="2009-03-25T01:53:54+00:00">01:53:54</abbr></a>] &lt;<cite>mru</cite>&gt; <q>gcc svn has some real issues on powerpc</q></li>
<li class="message">[<a href="#T01:54:22" id="T01:54:22"><abbr title="2009-03-25T01:54:22+00:00">01:54:22</abbr></a>] &lt;<cite>mru</cite>&gt; <q>see <a href="http://fate.multimedia.cx/">http://fate.multimedia.cx/</a> last table on page</q></li>
<li class="message">[<a href="#T01:55:43" id="T01:55:43"><abbr title="2009-03-25T01:55:43+00:00">01:55:43</abbr></a>] &lt;<cite>jso</cite>&gt; <q>Wow!  That is terrible.</q></li>
<li class="join">[<a href="#T01:55:53" id="T01:55:53"><abbr title="2009-03-25T01:55:53+00:00">01:55:53</abbr></a>] <span>* leslie (n=leslie@116.228.58.74) has joined #beagle</span></li>
<li class="message">[<a href="#T01:55:59" id="T01:55:59"><abbr title="2009-03-25T01:55:59+00:00">01:55:59</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's been like that for a year or so</q></li>
<li class="message">[<a href="#T01:56:32" id="T01:56:32"><abbr title="2009-03-25T01:56:32+00:00">01:56:32</abbr></a>] &lt;<cite>mru</cite>&gt; <q>it's failing one test on x86-64 even</q></li>
<li class="message">[<a href="#T01:56:34" id="T01:56:34"><abbr title="2009-03-25T01:56:34+00:00">01:56:34</abbr></a>] &lt;<cite>jso</cite>&gt; <q>Honestly, that doesn't surprise me.  I've dealt with a TON of errors in the GCC toolchain.  And use another language besides C?  Hahahaha.</q></li>
<li class="nick-change">[<a href="#T01:58:27" id="T01:58:27"><abbr title="2009-03-25T01:58:27+00:00">01:58:27</abbr></a>] <span>* fulgas is now known as FuL|OUT</span></li>
<li class="message">[<a href="#T02:22:34" id="T02:22:34"><abbr title="2009-03-25T02:22:34+00:00">02:22:34</abbr></a>] &lt;<cite>mru</cite>&gt; <q>jso: do you build for arm with gcc 4.4-to-be?</q></li>
<li class="message">[<a href="#T02:38:58" id="T02:38:58"><abbr title="2009-03-25T02:38:58+00:00">02:38:58</abbr></a>] &lt;<cite>jso</cite>&gt; <q>mru: Not right now.  I've successfully built working toolchains with SVN, about 6 months ago, but recent attempts have been complete failures.</q></li>
<li class="quit">[<a href="#T02:39:12" id="T02:39:12"><abbr title="2009-03-25T02:39:12+00:00">02:39:12</abbr></a>] <span>* BThompsonD (n=bernie@cpe-72-190-75-99.tx.res.rr.com) Quit (Remote closed the connection)</span></li>
<li class="message">[<a href="#T02:39:56" id="T02:39:56"><abbr title="2009-03-25T02:39:56+00:00">02:39:56</abbr></a>] &lt;<cite>jso</cite>&gt; <q>I actually had an Ada toolchain working at one time.  According to some who've attempted that mine was the only known success.  Then when trying to reattempt it, failture.</q></li>
<li class="message">[<a href="#T02:40:08" id="T02:40:08"><abbr title="2009-03-25T02:40:08+00:00">02:40:08</abbr></a>] &lt;<cite>vlad_</cite>&gt; <q>mmm, ada</q></li>
<li class="message">[<a href="#T02:40:19" id="T02:40:19"><abbr title="2009-03-25T02:40:19+00:00">02:40:19</abbr></a>] &lt;<cite>vlad_</cite>&gt; <q>I used to do a lot of work in ada :)</q></li>
<li class="message">[<a href="#T02:40:27" id="T02:40:27"><abbr title="2009-03-25T02:40:27+00:00">02:40:27</abbr></a>] &lt;<cite>vlad_</cite>&gt; <q>still quite fond of the language!</q></li>
<li class="message">[<a href="#T02:41:17" id="T02:41:17"><abbr title="2009-03-25T02:41:17+00:00">02:41:17</abbr></a>] &lt;<cite>jso</cite>&gt; <q>vlad_: Yeah.  But, it's not a language I'd like to hack in.  I'm the lead developer on a student UAV org and I tried to use it.  But, the compiler is the hangup.</q></li>
<li class="message">[<a href="#T02:41:43" id="T02:41:43"><abbr title="2009-03-25T02:41:43+00:00">02:41:43</abbr></a>] &lt;<cite>jso</cite>&gt; <q>vlad_: What kind of work did you do in Ada?  And which spec?</q></li>
<li class="message">[<a href="#T02:43:14" id="T02:43:14"><abbr title="2009-03-25T02:43:14+00:00">02:43:14</abbr></a>] &lt;<cite>vlad_</cite>&gt; <q>Ada95, was using gcc/gnat way back then (mid-90's)</q></li>
<li class="message">[<a href="#T02:43:34" id="T02:43:34"><abbr title="2009-03-25T02:43:34+00:00">02:43:34</abbr></a>] &lt;<cite>vlad_</cite>&gt; <q>was actually working with the compiler group itself at SGI, doing demos and some other stuff</q></li>
<li class="message">[<a href="#T02:43:40" id="T02:43:40"><abbr title="2009-03-25T02:43:40+00:00">02:43:40</abbr></a>] &lt;<cite>jso</cite>&gt; <q>Right on!</q></li>
<li class="message">[<a href="#T02:44:26" id="T02:44:26"><abbr title="2009-03-25T02:44:26+00:00">02:44:26</abbr></a>] &lt;<cite>jso</cite>&gt; <q>I've seen some Ada95, but the changes for Ada 2005 totally rock!  It makes the OOP stuff feel more natural and the language inclusion of basic vector and matrix mathematics is absolutely wonderful</q></li>
<li class="message">[<a href="#T02:46:20" id="T02:46:20"><abbr title="2009-03-25T02:46:20+00:00">02:46:20</abbr></a>] &lt;<cite>russ</cite>&gt; <q>jso: I had an arm ada toolchain from maybe 2004-2007</q></li>
<li class="message">[<a href="#T02:46:36" id="T02:46:36"><abbr title="2009-03-25T02:46:36+00:00">02:46:36</abbr></a>] &lt;<cite>jso</cite>&gt; <q>russ: Native?</q></li>
<li class="message">[<a href="#T02:46:42" id="T02:46:42"><abbr title="2009-03-25T02:46:42+00:00">02:46:42</abbr></a>] &lt;<cite>russ</cite>&gt; <q>cross</q></li>
<li class="message">[<a href="#T02:46:46" id="T02:46:46"><abbr title="2009-03-25T02:46:46+00:00">02:46:46</abbr></a>] &lt;<cite>jso</cite>&gt; <q>I forgot that "minor" detail. :P</q></li>
<li class="join">[<a href="#T02:47:05" id="T02:47:05"><abbr title="2009-03-25T02:47:05+00:00">02:47:05</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) has joined #beagle</span></li>
<li class="quit">[<a href="#T02:48:34" id="T02:48:34"><abbr title="2009-03-25T02:48:34+00:00">02:48:34</abbr></a>] <span>* niclas (n=n-anderb@nat/ti/x-4bb7df0a08d70b01) Quit (Remote closed the connection)</span></li>
<li class="quit">[<a href="#T02:55:00" id="T02:55:00"><abbr title="2009-03-25T02:55:00+00:00">02:55:00</abbr></a>] <span>* philv (n=huh@lebesgue.cowpig.ca) Quit (Read error: 104 (Connection reset by peer))</span></li>
<li class="quit">[<a href="#T03:00:35" id="T03:00:35"><abbr title="2009-03-25T03:00:35+00:00">03:00:35</abbr></a>] <span>* khasim (n=a0393720@192.163.20.231) Quit (Remote closed the connection)</span></li>
<li class="quit">[<a href="#T03:07:29" id="T03:07:29"><abbr title="2009-03-25T03:07:29+00:00">03:07:29</abbr></a>] <span>* srinivas (i=c40c265c@gateway/web/ajax/mibbit.com/x-27274bd8362daab1) Quit ("<a href="http://www.mibbit.com">http://www.mibbit.com</a> ajax IRC Client")</span></li>
<li class="join">[<a href="#T03:24:42" id="T03:24:42"><abbr title="2009-03-25T03:24:42+00:00">03:24:42</abbr></a>] <span>* Wowbagger_ (n=wowbagge@d154-20-187-250.bchsia.telus.net) has joined #beagle</span></li>
<li class="quit">[<a href="#T03:26:26" id="T03:26:26"><abbr title="2009-03-25T03:26:26+00:00">03:26:26</abbr></a>] <span>* bmxr (n=bmxr@S01060018f3b11a22.vf.shawcable.net) Quit (Remote closed the connection)</span></li>
<li class="join">[<a href="#T03:27:23" id="T03:27:23"><abbr title="2009-03-25T03:27:23+00:00">03:27:23</abbr></a>] <span>* sradhakrishna (i=75c3c52a@gateway/web/ajax/mibbit.com/x-367a6c67b4e0e91c) has joined #beagle</span></li>
<li class="message">[<a href="#T03:30:41" id="T03:30:41"><abbr title="2009-03-25T03:30:41+00:00">03:30:41</abbr></a>] &lt;<cite>sradhakrishna</cite>&gt; <q>am trying to boot debian on beagle. debian boots up, the keyboard and network get up and running, and at a stage when the downloads are happening, somehow, the keyboard and network get into a hung state. am suspecting its got to do with the version of uboot - 1.3.3. can someone help me out here please??</q></li>
<li class="quit">[<a href="#T03:30:51" id="T03:30:51"><abbr title="2009-03-25T03:30:51+00:00">03:30:51</abbr></a>] <span>* __alanc__ (n=a-campbe@nat/ti/x-4b411f0acbbf9e39) Quit (Remote closed the connection)</span></li>
<li class="message">[<a href="#T03:31:59" id="T03:31:59"><abbr title="2009-03-25T03:31:59+00:00">03:31:59</abbr></a>] &lt;<cite>sradhakrishna</cite>&gt; <q>should i update uboot? where do i find the latest binaries for rev b6?</q></li>
<li class="message">[<a href="#T03:33:29" id="T03:33:29"><abbr title="2009-03-25T03:33:29+00:00">03:33:29</abbr></a>] &lt;<cite>mru</cite>&gt; <q>I doubt it has anything to do with u-boot</q></li>
<li class="message">[<a href="#T03:33:42" id="T03:33:42"><abbr title="2009-03-25T03:33:42+00:00">03:33:42</abbr></a>] &lt;<cite>mru</cite>&gt; <q>if the kernel boots, u-boot is no longer relevant</q></li>
<li class="join">[<a href="#T03:34:30" id="T03:34:30"><abbr title="2009-03-25T03:34:30+00:00">03:34:30</abbr></a>] <span>* Abraxas3d (n=michelle@cpe-24-94-7-251.san.res.rr.com) has joined #beagle</span></li>
<li class="message">[<a href="#T03:38:02" id="T03:38:02"><abbr title="2009-03-25T03:38:02+00:00">03:38:02</abbr></a>] &lt;<cite>sradhakrishna</cite>&gt; <q>mru: kernel hasn't booted yet i guess. am following the procedure mentioned in <a href="http://elinux.org/BeagleBoardDebian">http://elinux.org/BeagleBoardDebian</a></q></li>
<li class="message">[<a href="#T03:38:59" id="T03:38:59"><abbr title="2009-03-25T03:38:59+00:00">03:38:59</abbr></a>] &lt;<cite>sradhakrishna</cite>&gt; <q>and am at the stage "Login and install kernel image"</q></li>
<li class="message">[<a href="#T03:39:01" id="T03:39:01"><abbr title="2009-03-25T03:39:01+00:00">03:39:01</abbr></a>] &lt;<cite>sradhakrishna</cite>&gt; <q><a href="http://elinux.org/BeagleBoardDebian#Login_.26_Install_kernel-image">http://elinux.org/BeagleBoardDebian#Login_.26_Install_kernel-image</a></q></li>
<li class="join">[<a href="#T03:43:33" id="T03:43:33"><abbr title="2009-03-25T03:43:33+00:00">03:43:33</abbr></a>] <span>* philv (n=huh@lebesgue.cowpig.ca) has joined #beagle</span></li>
<li class="join">[<a href="#T03:48:52" id="T03:48:52"><abbr title="2009-03-25T03:48:52+00:00">03:48:52</abbr></a>] <span>* rahgav_n (i=7bed8ae0@gateway/web/ajax/mibbit.com/x-f9babbab735e8ddc) has joined #beagle</span></li>
<li class="quit">[<a href="#T04:09:42" id="T04:09:42"><abbr title="2009-03-25T04:09:42+00:00">04:09:42</abbr></a>] <span>* sradhakrishna (i=75c3c52a@gateway/web/ajax/mibbit.com/x-367a6c67b4e0e91c) Quit ("<a href="http://www.mibbit.com">http://www.mibbit.com</a> ajax IRC Client")</span></li>
<li class="join">[<a href="#T04:15:44" id="T04:15:44"><abbr title="2009-03-25T04:15:44+00:00">04:15:44</abbr></a>] <span>* mib_9jpcw9 (i=c40c265c@gateway/web/ajax/mibbit.com/x-448df305b7d8c0b4) has joined #beagle</span></li>
<li class="quit">[<a href="#T04:16:26" id="T04:16:26"><abbr title="2009-03-25T04:16:26+00:00">04:16:26</abbr></a>] <span>* mib_9jpcw9 (i=c40c265c@gateway/web/ajax/mibbit.com/x-448df305b7d8c0b4) Quit (Client Quit)</span></li>
<li class="join">[<a href="#T04:17:51" id="T04:17:51"><abbr title="2009-03-25T04:17:51+00:00">04:17:51</abbr></a>] <span>* jsync (n=jess@59.160.172.220) has joined #beagle</span></li>
<li class="quit">[<a href="#T04:23:56" id="T04:23:56"><abbr title="2009-03-25T04:23:56+00:00">04:23:56</abbr></a>] <span>* jrmuizel (n=jrmuizel@CPE001f5be79d0f-CM0017ee62f8b0.cpe.net.cable.rogers.com) Quit ()</span></li>
<li class="part">[<a href="#T04:25:18" id="T04:25:18"><abbr title="2009-03-25T04:25:18+00:00">04:25:18</abbr></a>] <span>* Abraxas3d (n=michelle@cpe-24-94-7-251.san.res.rr.com) has left #beagle</span></li>
<li class="message">[<a href="#T04:38:27" id="T04:38:27"><abbr title="2009-03-25T04:38:27+00:00">04:38:27</abbr></a>] &lt;<cite>geckosen1tor</cite>&gt; <q>does anyone know why one hdmi cable would work but another does not?</q></li>
<li class="message">[<a href="#T04:38:31" id="T04:38:31"><abbr title="2009-03-25T04:38:31+00:00">04:38:31</abbr></a>] &lt;<cite>geckosen1tor</cite>&gt; <q>are there diffrerent types?</q></li>
<li class="quit">[<a href="#T04:54:37" id="T04:54:37"><abbr title="2009-03-25T04:54:37+00:00">04:54:37</abbr></a>] <span>* openfree (i=cb6ea385@gateway/web/ajax/mibbit.com/x-a49c940d31e0f503) Quit ("<a href="http://www.mibbit.com">http://www.mibbit.com</a> ajax IRC Client")</span></li>
<li class="message">[<a href="#T04:59:58" id="T04:59:58"><abbr title="2009-03-25T04:59:58+00:00">04:59:58</abbr></a>] &lt;<cite>russ</cite>&gt; <q>geckosen1tor: not as far as I know</q></li>
