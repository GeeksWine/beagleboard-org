<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="helma.xsl"?>
<xmlroot xmlns:hop="http://www.helma.org/docs/guide/features/database">
  <hopobject id="2892" name="processingjs" prototype="Page" created="1374308047101" lastModified="1374308175283">
  <hop:parent idref="2471" prototyperef="Page"/>
    <is_xhtml type="boolean">true</is_xhtml>
    <http_remotehost>127.0.0.1</http_remotehost>
    <http_language>en-US,en;q=0.8</http_language>
    <uri>processingjs</uri>
    <http_browser>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.71 Safari/537.36</http_browser>
    <time type="date">20.07.2013 03:16:15 CDT</time>
    <hopsession>127.0.0.12.0.200.sdmkpcmoc75l</hopsession>
    <body>&lt;script src=&quot;/static/bonescript.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    setTargetAddress(&apos;192.168.7.2&apos;);
&lt;/script&gt;
&lt;script src=&quot;/static/processing.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;application/processing&quot; target=&quot;mysketch&quot;&gt;
    Bouncer[] bouncer = new Bouncer[3];

  void setup() {
    size(200,200);
    frameRate(24);
    stroke(#003300);
    fill(#0000FF);
    bouncer[0] = new Ball(width/3-20,20,20);
    bouncer[1] = new Box(width/2-10,20,20,20);
    bouncer[2] = new Ball((2*width/3)+20,20,20);
  }

  void draw() {
    for(int b=0, end=bouncer.length; b&lt;end;b++) {
      bouncer[b].computeNextStep(width, height, frameRate);
    }
    background(#FFFFEE);
    for(int b=0, end=bouncer.length; b&lt;end;b++) {
      bouncer[b].draw();
    }
  }

  void mousePressed() {
    for(int b=0, end=bouncer.length; b&lt;end;b++) {
      if(bouncer[b].mouseOver(mouseX, mouseY)) {
        bouncer[b].mousePressed();
      }
    }
  }

  void mouseReleased() {
    for(int b=0, end=bouncer.length; b&lt;end;b++) {
      bouncer[b].mouseReleased();
    }
  }

  void mouseDragged() {
    for(int b=0, end=bouncer.length; b&lt;end;b++) {
      bouncer[b].mouseDragged(mouseX, mouseY);
    }
  }

  abstract class Bouncer
  {
    int x, y;
    boolean canmove = true;
    int step = 0;
    int xoffset = 0;
    int yoffset = 0;

    void computeNextStep(int width, int height, float framerate) {
      if(canmove) {
        reallyComputeNextStep(width, height, framerate);
      }
    }

    abstract void reallyComputeNextStep(int width, int height, float framerate);

    abstract void draw();

    abstract boolean mouseOver(int mx, int my);

    void mousePressed() {
      canmove = false;
    }

    void mouseReleased() {
      canmove = true;
      x += xoffset;
      y += yoffset;
      xoffset = 0;
      yoffset = 0;
    }

    void mouseDragged(int mx, int my) {
      if(!canmove) {
        xoffset = mx-x;
        yoffset = my-y;
      }
    }
  }

  class Ball extends Bouncer
  {
    int radius;

    Ball(int x, int y, int r) {
      this.x = x;
      this.y = y;
      this.radius = r;
    }

    void reallyComputeNextStep(int sketch_width, int sketch_height, float frame_rate) {
      step = (int)((step+1) % frame_rate);
      float sin_value = abs(sin(PI*step/(float)frame_rate));
      float bounce_height = sketch_height/2 * sin_value;
      float ball_height = sketch_height - (bounce_height + radius);
      y = (int) (ball_height);
    }

    void draw() { ellipse(x+xoffset,y+yoffset,radius,radius); }

    boolean mouseOver(int mx, int my) {
      return sqrt((x-mx)*(x-mx) + (y-my)*(y-my)) &lt;= radius;
    }
  }

  class Box extends Bouncer
  {
    int w,h;
    int step=0;

    Box(int x, int y, int w, int h) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
    }

    void reallyComputeNextStep(int sketch_width, int sketch_height, float frame_rate) {
      step = (int)((step+1) % frame_rate);
      float sin_value = abs(sin(PI/2.0 + (PI*step/(float)frame_rate)));
      float bounce_height = sketch_height/2 * sin_value;
      float ball_height = sketch_height - (bounce_height + h);
      y = (int) (ball_height);
    }

    void draw() { rect(x+xoffset,(y-h/2)+yoffset,w,h); }

    boolean mouseOver(int mx, int my) {
      return x&lt;=mx &amp;&amp; mx&lt;=x+w &amp;&amp; (y-h/2)&lt;=my &amp;&amp; my&lt;=(y+h/2);
    }
  }
&lt;/script&gt;
&lt;canvas id=&quot;mysketch&quot;&gt;&lt;/canvas&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</body>
    <pseudoparent idref="2471" prototyperef="Page"/>
    <http_referer>http://beagleboard.org/support/BoneScript/processingjs/edit</http_referer>
    <http_host>beagleboard.org</http_host>
    <lang>en-us</lang>
    <user>jkridner@gmail.com</user>
  </hopobject>
</xmlroot>
