<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="helma.xsl"?>
<xmlroot xmlns:hop="http://www.helma.org/docs/guide/features/database">
  <hopobject id="3937" name="raspberry-pi-2" prototype="Page" created="1423153879205" lastModified="1423156045473">
  <hop:parent idref="2989" prototyperef="Page"/>
    <is_xhtml type="boolean">true</is_xhtml>
    <g_userstate_h2>102344295024422039483=1</g_userstate_h2>
    <http_remotehost>127.0.0.1</http_remotehost>
    <g_authuser_h2>0</g_authuser_h2>
    <http_language>en-US,en;q=0.8</http_language>
    <uri>raspberry-pi-2</uri>
    <http_browser>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2292.0 Safari/537.36</http_browser>
    <time type="date">05.02.2015 17:07:25 UTC</time>
    <hopsession>127.0.0.172.19.131.mzzdzy95t36j</hopsession>
    <body>&lt;h1&gt;How does BeagleBone Black compare to Raspberry Pi 2?&lt;br /&gt;&lt;small style=&quot;font-size: 12px;&quot;&gt;by Jason Kridner&lt;/small&gt;&lt;/h1&gt;
&lt;p&gt;As many of you might have heard, Raspberry Pi launched their next board, the Raspberry Pi 2. There has been noticeable differences in the primary processor performance from the original Pi to Pi 2. This has cause a lot of people to revisit the question of how the BeagleBone Black compares to Raspberry Pi.&lt;/p&gt;
&lt;p&gt;The lineage of the two projects tells part of the story. The original BeagleBoard started with a mobile phone processor and the Pi started with a multimedia chip. The Pi 2 still seems to be very multimedia and GUI centric. The BeagleBone and BeagleBone Black (the Bones), however, started with an industrial control and communications chip. These starting points lean to suitability of each being better for certain types of tasks. The Bones are particularly suited to building small connected electronics projects with key advantages in several areas.&lt;/p&gt;
&lt;p&gt;The Bone has better I/O capabilities with 7 channel 200kHz 12-bit ADC, 8 PWMs, 4 UARTs, quadrature encoder hardware and much more. This means you don&apos;t have to buy additional components to connect up many more sensors and actuators. An actuator could be something like an LED string, an LCD, a switch or a motor. For example, motor drive strength can be controlled using a PWM and the large number of PWM channels on the Bone make it better for driving motors, even if you need to add a circuit to give the drivers extra strength. Adding external PWM drivers would cost additional money and might incur overheads to update. If you care mostly about connecting electronics, then the Bones might be your best choice.&lt;/p&gt;
&lt;p&gt;The Bones also have better real-time control with 2 200MHz, 32-bit RISC programmable real-time units (PRUs) that are optimized for single-cycle latency to I/O pins, enabling peripheral emulation and predictable ultra low latency hard real time control. This mix of Linux and a microcontroller on a single chip makes the Bones able to handle tasks you simply can&apos;t do with another Linux machine and external microcontroller. This is primarily due to the shared memory nature of the ARM and PRUs in the Bones. An example is BeagleLogic.net, which uses the PRUs to create a 14-channel 100MHz logic analyzer out of a Bone and is capable of streaming over a GB of samples using the ARM CPU to compress the data ahead of storing it. Another example is LEDscape, which is able to use Python scripts to drive hundreds of thousands of LEDs at costing around 50-to-1 less than what you could drive with a Pi, even with an external microcontroller. So, not only does adding an external microcontroller add cost, it just doesn&apos;t enable you to reproduce the capability.&lt;/p&gt;
&lt;p&gt;The extensive I/O capabilities of the Bones have resulted in over 100 add-on cape boards to add touch displays, sensors including GPS, various network connections including WiFi and 3G, communication busses like CAN, motor control and power/battery management. These enable you to get a quick start on your hardware design and get to developing your software with a head start. While there are many add-on boards for the Pi, there just isn&apos;t enough I/O to get many interface tasks accomplished.&lt;/p&gt;
&lt;p&gt;What will matter the most to many people is the fact that the Pi is still closed source hardware with limited documentation of the design and no ability to customize or manage the supply chain. This is only part of why people consider it unsuitable for professional development.&lt;/p&gt;</body>
    <pseudoparent idref="2989" prototyperef="Page"/>
    <pvcount type="float">12.0</pvcount>
    <gcscu_09fc0a6904b23374785c0ee5cef186728fc4a113_h2>C=456596826642-hp34gga3r8lmshjkarkbfoohfm2972f9.apps.googleusercontent.com:S=78f92f08121bd4828d687659d9f26b3482501c2f..2875:I=1422539207:X=1422542807</gcscu_09fc0a6904b23374785c0ee5cef186728fc4a113_h2>
    <render_skin>blog</render_skin>
    <edit_skin>edit_blog</edit_skin>
    <http_referer>http://beagleboard.org/blog-drafts/raspberry-pi-2/edit</http_referer>
    <http_host>127.0.0.1:8080</http_host>
    <lang>en-us</lang>
    <user>jkridner.wordpress.com</user>
  </hopobject>
</xmlroot>
