<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="helma.xsl"?>
<xmlroot xmlns:hop="http://www.helma.org/docs/guide/features/database">
  <hopobject id="2047" name="OpenRTDynamics" prototype="Page" created="1341655588464" lastModified="1354023435578">
  <hop:parent idref="20" prototyperef="Page"/>
    <is_xhtml type="boolean">true</is_xhtml>
    <http_remotehost>127.0.0.1</http_remotehost>
    <pname>OpenRTDynamics</pname>
    <registrant>christianausb.myopenid.com</registrant>
    <http_language>de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4</http_language>
    <uri>OpenRTDynamics</uri>
    <http_browser>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Ubuntu/12.04 Chromium/20.0.1132.47 Chrome/20.0.1132.47 Safari/536.11</http_browser>
    <time type="date">27.11.2012 07:37:15 CST</time>
    <updatetime type="date">07.07.2012 05:06:28 CDT</updatetime>
    <hopsession>127.0.0.130.149.155.1d0i2u3oat1v5</hopsession>
    <body>&lt;p&gt;This project is about bringing the real-time framework OpenRTDynamics to the Beagleboard. It enables data acquisition and processing (filters, state machines, data analysis) as well as remote monitoring / control capabilities via a TCP/IP Interface. Applications include: Robot control, sensor measurement applications along with automatic data analysis or everything that is based on regularly sampled data.
&lt;/p&gt;&lt;p&gt;
&lt;h3&gt;Description&lt;/h3&gt;
&lt;/p&gt;
OpenRTDynamics (ORTD) is a novel approach to the implementation of block /
signal based schematics, as commonly used in control engineering and signal
processing. The implementations are real-time capable (like the ones produced by
Real-Time Workshop® or Scicos Code Generation). This framework is suitable for
time discrete signal processing algorithms, using the same principles like in
Scicos or Simulink. However, schematics are described by combining special
Scilab functions provided by the framework, which enables advantageous
features:
&lt;/p&gt;&lt;p&gt;
Additionally to standard approaches, ORTD features the ability to implement
state machines represented by multiple, switching subsystems (each subsystem
corresponds to one state). Since, subsystems can also run in the context of
separated threads (with or without synchronisation to another one), e.g. high-
and low frequency parts can be divided or computationally intensive tasks can
run in the background. Because of a remote control interface and the ability to
include Scilab-Code as computational functions (S-function like), ORTD is also
ideally suited for laboratory automation. The ability to replace sub-schematics
with new implementations and parameters during runtime removes the effort of
restarting the main real-time program when new algorithms are (automatically)
designed.


&lt;/p&gt;&lt;p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;/p&gt;
An example on how to access the GPIO hardware interface is now available. Have a look at the README-file, section &quot;INSTALLATION ON BEAGLEBONE&quot; or into the folder examples/beaglebone.
&lt;/p&gt;
&lt;h3&gt;Video Demonstration&lt;/h3&gt;
&lt;iframe width=&quot;480&quot; height=&quot;360&quot; src=&quot;http://www.youtube.com/embed/_3j4Zu9wGhI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</body>
    <pseudoparent idref="20" prototyperef="Page"/>
    <rssfeed></rssfeed>
    <homepage>http://openrtdynamics.sf.net</homepage>
    <render_skin>project</render_skin>
    <edit_skin>edit_project</edit_skin>
    <http_referer>http://beagleboard.org/project/OpenRTDynamics/edit</http_referer>
    <http_host>beagleboard.org</http_host>
    <errmsg></errmsg>
    <shortdesc>A framework for signal processing and real time control. Port to Beagleboard / bone</shortdesc>
    <user>christianausb.myopenid.com</user>
  </hopobject>
</xmlroot>
