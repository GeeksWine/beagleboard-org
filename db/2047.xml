<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="helma.xsl"?>
<xmlroot xmlns:hop="http://www.helma.org/docs/guide/features/database">
  <hopobject id="2047" name="OpenRTDynamics" prototype="Page" created="1341655588464" lastModified="1349971618337">
  <hop:parent idref="20" prototyperef="Page"/>
    <is_xhtml type="boolean">true</is_xhtml>
    <http_remotehost>127.0.0.1</http_remotehost>
    <pname>OpenRTDynamics</pname>
    <registrant>christianausb.myopenid.com</registrant>
    <http_language>en-US,en;q=0.8</http_language>
    <uri>OpenRTDynamics</uri>
    <http_browser>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.79 Safari/537.4</http_browser>
    <time type="date">11.10.2012 11:06:58 CDT</time>
    <updatetime type="date">07.07.2012 05:06:28 CDT</updatetime>
    <hopsession>127.0.0.107.5.165.95krpamcv4vp</hopsession>
    <body>&lt;p&gt;This project is about bringing the real-time framework OpenRTDynamics to the Beagleboard. It enables data acquisition and processing (filters, state machines, data analysis) as well as remote monitoring / control capabilities via a TCP/IP Interface. Applications include: Robot control, sensor measurement applications along with automatic data analysis or everything that is based on regularly sampled data.
&lt;/p&gt;&lt;p&gt;
The Real Time Dynamics Toolbox is a noval approach to the implementation of block / signal based schematics, commonly used in control engineering and signal processing, for real time usage (like Real-Time Workshop® or Scicos Code Generation). It is suitable for implementing time discrete signal processing algorithms, like one would do in Scicos or Simulink, within Scilab scripts (Matlab like) by using toolbox functions in order to set-up a description of the schematic. This way, well structured code can be achieved, whereby i.e. the filter design could be included nearby the implementation for better review. Additionally, functional and object orientated design schemes can be realised. The latter feature enables the possibility to implement reusable parametrised sub-schematics that may also change in its structure based on parametrisation.
&lt;/p&gt;&lt;p&gt;
Further, along with the remote control interface and the ability to implement state machines, to run different simulations in threads and to include Scilab-Code as computational functions (S-function like), ORTD is also ideally suited for laboratory automation. The ability to replace sub-schematics with new implementations and parameters during runtime removes the effort of restarting the main real time program.
&lt;/p&gt;
&lt;h3&gt;Video Demonstration&lt;/h3&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/_3j4Zu9wGhI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</body>
    <pseudoparent idref="20" prototyperef="Page"/>
    <rssfeed></rssfeed>
    <homepage>http://openrtdynamics.sf.net</homepage>
    <render_skin>project</render_skin>
    <edit_skin>edit_project</edit_skin>
    <http_referer>http://beagleboard.org/project/OpenRTDynamics/edit</http_referer>
    <http_host>beagleboard.org</http_host>
    <errmsg></errmsg>
    <shortdesc>A framework for signal processing and real time control. Port to Beagleboard / bone</shortdesc>
    <user>blog.hangerhead.com</user>
  </hopobject>
</xmlroot>
