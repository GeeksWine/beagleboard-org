<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="helma.xsl"?>
<xmlroot xmlns:hop="http://www.helma.org/docs/guide/features/database">
  <hopobject id="3567" name="Page" prototype="Page" created="1396975410691" lastModified="1397135572077">
  <hop:parent idref="0" prototyperef="Root"/>
    <is_xhtml type="boolean">true</is_xhtml>
    <http_remotehost>98.250.189.79</http_remotehost>
    <http_language>en-US,en;q=0.8</http_language>
    <uri>updater</uri>
    <http_browser>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36</http_browser>
    <time type="date">10.04.2014 13:12:52 UTC</time>
    <hopsession>98.250.189.1fr2k0ri8th8m</hopsession>
    <body>&lt;script src=&quot;/static/bonescript.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/static/jquery.microdata.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/static/jquery.microdata.json.js&quot;&gt;&lt;/script&gt;
&lt;div id=&quot;floatMenu&quot;&gt;  
    &lt;ul&gt;   
        &lt;li id=&quot;fmStep1&quot;&gt;&lt;a href=&quot;#step1&quot;&gt;&lt;strong&gt;Step 1:&lt;/strong&gt;&lt;br /&gt;
            Connect to BeagleBone Black&lt;/a&gt;&lt;/li&gt; 
        &lt;li id=&quot;fmStep2&quot;&gt;&lt;a href=&quot;#step2&quot;&gt;&lt;strong&gt;Step 2:&lt;/strong&gt;&lt;br /&gt;
            Insert blank uSD card and select image to install&lt;/a&gt;&lt;/li&gt;         
        &lt;li id=&quot;fmStep3&quot;&gt;&lt;a href=&quot;#step3&quot;&gt;&lt;strong&gt;Step 3:&lt;/strong&gt;&lt;br /&gt;
            Select image to download&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;gettingstarted&quot;&gt;
    &lt;h1&gt;BeagleBone Image Updater&lt;/h1&gt;
    &lt;p&gt;
        This step-by-step guide will use the BoneScript server on your
        BeagleBone Black to download the latest BeagleBone Black software image
        onto a uSD card
        inserted in your BeagleBone Black uSD card slot. To do this,
        you
        will need to have your BeagleBone Black connected to the Internet and
        visible to the computer you are using to visit this web page.
    &lt;/p&gt;
    &lt;h3 id=&quot;step1&quot;&gt;
        &lt;img class=&quot;steps&quot; src=&quot;/static/images/btn_step1.gif&quot; /&gt;
        &lt;strong&gt;Connect to BeagleBone Black&lt;/strong&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As long as your BeagleBone Black is already running on of the images
        shipped with the boards, you should be good to plug it into your
        computer and get connected to it from this web page. If not, you&apos;ll
        need to user other steps to download and flash the latest image:&lt;br /&gt;
        &lt;a href=&quot;/Getting%20Started#update&quot;&gt;http://beagleboard.org/Getting Started#update&lt;/a&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Start by connecting your BeagleBone Black up to your computer using
        the provided USB cable as this is the simplest method. If you are
        an advanced user, you can try using Ethernet, a WiFi USB dongle or
        Internet Connection Sharing over USB.
    &lt;/p&gt;
    &lt;p&gt;
        When you type your board&apos;s address into the box below and click
        &lt;b&gt;GO&lt;/b&gt;, a script will
        be copied onto your board to write images to your uSD cards.
        If connected over USB, the default address for your
        board is &apos;192.168.7.2&apos;.
    &lt;/p&gt;
    &lt;input id=&quot;address&quot; value=&quot;192.168.7.2&quot;&gt;&lt;/input&gt;
    &lt;pre id=&quot;step1-log&quot;&gt;&lt;/pre&gt;
    &lt;h3 id=&quot;step2&quot;&gt;
        &lt;img class=&quot;steps&quot; src=&quot;/static/images/btn_step2.gif&quot; /&gt;
        &lt;strong&gt;Insert blank uSD card and select image to install&lt;/strong&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        This script will write the selected image to your uSD card
        (/dev/mmcblk1) if you are running off of your on-board eMMC, so be
        sure to insert a blank uSD card &lt;i&gt;AFTER&lt;/i&gt; you finish booting
        up. If you boot off of a uSD card, it is possible you will write
        to the eMMC instead.
    &lt;/p&gt;
    &lt;iframe id=&quot;latestImagesFrame&quot; style=&quot;visibility:hidden;display:none&quot;&gt;&lt;/iframe&gt;
    &lt;div id=&quot;latestImages&quot;&gt;&lt;/div&gt;
    &lt;pre id=&quot;step2-log&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    var address = getParameterByName(&quot;address&quot;);
    var handlers = {initialized: run};
    if(address) {
        $(&apos;#step1-log&apos;).append(&quot;Attempting connection to &quot; + address + &apos;\n&apos;);
        setTargetAddress(address, handlers);
    }
    $(&apos;#address&apos;).keypress(onAddress);
    $.get(&apos;/latest-images/&apos;, &apos;html&apos;).done(onLatestImages).fail(onLatestImagesFail);
    
    function onAddress(e) {
        if(e.which == 10 || e.which == 13) {
            address = $(&apos;#address&apos;).val();
            $(&apos;#step1-log&apos;).append(&quot;Attempting connection to &quot; + address + &apos;\n&apos;);
            setTargetAddress(address, handlers);
        }
    }
    
    function onLatestImages(data) {
        data = data.replace(/&lt;script/g, &quot;&lt;!--&quot;);
        data = data.replace(/&lt;\/script&gt;/g, &quot;--&gt;&quot;);
        var page = $(data).items(&quot;http://schema.org/SoftwareApplication&quot;);
        var parsed = $.microdata.json(page, dataFormatter);
        //$(&apos;#step2-log&apos;).append(JSON.stringify(parsed, null, 4) + &quot;\n&quot;);
        $(&apos;#latestImages&apos;).append(&apos;&lt;select&gt;&lt;/select&gt;&apos;);
        for(var i in parsed.items) {
            var x = parsed.items[i].properties;
            if(x.device[0].match(/BeagleBone Black/)) {
                var name = x.name[0] + &apos; &apos; + x.datePublished[0] + &apos; &apos; + x.memoryRequirements[0];
                $(&apos;#latestItems select&apos;)
                    .append(&apos;&lt;option&gt;&lt;/option&gt;&apos;)
                    .attr(&apos;value&apos;, x.downloadURL[0])
                    .text(name);
            }
        }
    }
    
    function dataFormatter(o) { return o; }
    
    function jsonFormatter(o) { return JSON.stringify(o, null, 4); }
    
    function onLatestImagesFail() {
        $(&apos;#step2-log&apos;).append(&quot;Fetch of latest-images failed\n&quot;);
    }
    
    function getParameterByName(name) {
        name = name.replace(/[\[]/, &quot;\\\[&quot;).replace(/[\]]/, &quot;\\\]&quot;);
        var regex = new RegExp(&quot;[\\?&amp;]&quot; + name + &quot;=([^&amp;#]*)&quot;), results = regex.exec(location.search);
        return results == null ? &quot;&quot; : decodeURIComponent(results[1].replace(/\+/g, &quot; &quot;));
    }

    function run() {
        $(&apos;#step1-log&apos;).append(&apos;Connected to &apos; + address + &apos;\n&apos;);
        var b = require(&apos;bonescript&apos;);
        
        var sourceJS = &apos;/static/updater.js&apos;;
        var targetJS = &apos;/var/lib/cloud9/autorun/updater.js&apos;;
        var socket = null;
        b.getPlatform(onGetPlatform);

        function onGetPlatform(platform) {
            $(&apos;#step1-log&apos;).append(&quot;Running BoneScript version &quot; + platform.bonescript + &apos;\n&apos;);
            b.setDate(Date().toString(), onSetDate);
        }

        function onSetDate() {
            $(&apos;#step1-log&apos;).append(&quot;Reading &quot; + sourceJS + &apos;\n&apos;);
            jQuery.get(sourceJS, onJSReadSuccess, &apos;text&apos;).fail(onJSReadFail);
        }

        function onJSReadSuccess(contentsJS) {
            $(&apos;#step1-log&apos;).append(&quot;Writing &quot; + targetJS + &apos;\n&apos;);
            b.writeTextFile(targetJS, contentsJS, onJSWritten);
        }

        function onJSReadFail() {
            $(&apos;#step1-log&apos;).append(&quot;Failed to read &quot; + targetJS + &apos;\n&apos;);
        }
        
        function onJSWritten() {
            $(&apos;#step1-log&apos;).append(&quot;Waiting 5 seconds...\n&quot;);
            setTimeout(connectSocket, 5000);
        }
        
        var verifyAttempts = 0;
        function connectSocket() {
            if(verifyAttempts &lt; 5) {
                verifyAttempts++;
                var path = &apos;http://&apos; + address + &apos;:8000/socket.io/socket.io.js&apos;;
                $(&apos;#step1-log&apos;).append(&quot;Attempting to fetch &quot; + path + &apos;\n&apos;);
                $.getScript(path).done(onSocketIOLoad).fail(onSocketFail);
            } else {
                $(&apos;#step1-log&apos;).append(&quot;Connection failed\n&quot;);                    
            }
        }
        
        function onSocketFail(jqxhr, settings, exception) {
            $(&apos;#step1-log&apos;).append(&quot;Load failed: exception\n&quot;);
            onJSWritten();
        }
        
        function onSocketIOLoad(script, textStatus) {
            $(&apos;#step1-log&apos;).append(&quot;Load status: &quot; + textStatus + &apos;\n&apos;);
            socket = new io.connect(&apos;http://&apos; + address + &apos;:8000&apos;);
            socket.on(&apos;connect&apos;, onConnect);
            
            function onConnect(data) {
                stepOneDone();
            }
        }
        
        function stepOneDone() {
            $(&apos;#step1-log&apos;).append(&quot;Connection successful... on to Step #2\n&quot;);
            setTimeout(nextStep, 0);
        }
        
        function nextStep() {
            $(&apos;#fmStep1&apos;).addClass(&apos;fmGreen&apos;);
            location.href = &quot;#&quot;;
            location.href = &quot;#step2&quot;;    
        }
    }
&lt;/script&gt;</body>
    <pseudoparent idref="0" prototyperef="Root"/>
    <http_referer>http://beagleboard.org/updater/edit</http_referer>
    <http_host>beagleboard.org</http_host>
    <user>jkridner.wordpress.com</user>
    <lang>en-us</lang>
  </hopobject>
</xmlroot>
